/**
 * Generated by Verge3D Puzzles v.3.7.0
 * Mon Aug 16 2021 16:02:37 GMT-0400 (Eastern Daylight Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = true;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = true;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["MAIN"] = MAIN;
this.procedures["TEXT_READOUT"] = TEXT_READOUT;
this.procedures["SET_DICT_OBJECT_COLORS"] = SET_DICT_OBJECT_COLORS;
this.procedures["GET_SELECTED_OBJECT"] = GET_SELECTED_OBJECT;
this.procedures["UPDATE_READOUT"] = UPDATE_READOUT;
this.procedures["DRAG_OBJECT"] = DRAG_OBJECT;
this.procedures["CHANGE_COLORS_OF_ALL"] = CHANGE_COLORS_OF_ALL;

var PROC = {
    "MAIN": MAIN,
    "TEXT_READOUT": TEXT_READOUT,
    "SET_DICT_OBJECT_COLORS": SET_DICT_OBJECT_COLORS,
    "GET_SELECTED_OBJECT": GET_SELECTED_OBJECT,
    "UPDATE_READOUT": UPDATE_READOUT,
    "DRAG_OBJECT": DRAG_OBJECT,
    "CHANGE_COLORS_OF_ALL": CHANGE_COLORS_OF_ALL,
};

var touching, readout_for_selected_object, touched_object, DICT_object_colors, selected_object, object_touching, LIST_Objects, object_for_color, object_in_list, LIST_all_touching_objects, object_NOT_touching, readout_for_all_objects, raycast, j;


function createGridHelper() {
    return (function

//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        gridSize,
        divisions,
        colorGrid,
        colorCenterLine
    )
    {   //  BEGIN Plug.provide Function

//________________________________________________________________________________
//  MAIN FUNCTION

        mainFunction();
        function mainFunction()
        {
//________________________________________________________________________________
//  PUZZLE CORE CODE


            if (typeof gridHelperNumber == 'undefined')

                { window.gridHelperNumber = 1 }

            else {  gridHelperNumber++  };



            let gridHelperParent = new v3d.Object3D();

            let gridHelper = new v3d.GridHelper(gridSize, divisions, colorCenterLine, colorGrid);

            gridHelper.raycast = function() {};



            gridHelper.rotateX(v3d.Math.degToRad(-90));

            gridHelperParent.add(gridHelper);

            gridHelperParent.rotateX(v3d.Math.degToRad(-90));



            gridHelperParent.name = 'gridHelper_' + gridHelperNumber;

            app.scene.add(gridHelperParent);

//________________________________________________________________________________
        };  // END mainFunction
//________________________________________________________________________________
    }).apply(null, arguments);
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




/**
 * mesh or multi-material object
 */
function isMeshObj(obj) {
    if (obj.isMesh)
        return true;

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        if (child.isMesh && child.isMaterialGeneratedMesh)
            return true;
    }

    return false;
}




function getObjectsFromCollect(obj, type, out) {
    if (!notIgnoredObj(obj))
        return;

    switch (type) {
    case 'ALL':
        if (out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'ANNOTATION':
        if (obj.isAnnotation && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'BONE':
        if (obj.isBone && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'CAMERA':
        if (obj.isCamera && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'EMPTY':
        if (!obj.isAnnotationControl && !obj.isBone && !obj.isCamera && !obj.isGroup &&
                !obj.isLine && !obj.isLOD && !obj.isLight && !isMeshObj(obj) && !obj.isPoints &&
                !obj.isScene && !obj.isSprite && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'LIGHT':
        if (obj.isLight && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'MESH':
        if (isMeshObj(obj) && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    default:
        console.error('getObjectsFrom: Unknown object type: ' + type);
        break;
    }

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        getObjectsFromCollect(child, type, out);
    }
}

// getObjectsFrom puzzle
function getObjectsFrom(objSelector, type) {

    var out = [];

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;

        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        getObjectsFromCollect(obj, type, out);
    }

    return out;
}



function createBoundingBoxWithHelper() {
    return (function
//____________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS
    (
        objInput,
        box3HelperCheckbox,
        color
    )
    {
//________________________________________________________________________________
//  DECLARE VARIABLES

    const puzzleName = 'Create Bounding Box';
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

    if ( !objInput ) {
        console.log('[ GLIFTEK ]: The',puzzleName, 'plugin puzzle is missing an input!');
    }   else    { mainFunction () };

//________________________________________________________________________________
//  BEGIN mainFunction

    function mainFunction()
    {

//________________________________________________________________________________
//  INITIAL ARRAY CHECK

        mainInput_arrayCheck(objInput);

        function mainInput_arrayCheck(objInput)
        {

            if ( !Array.isArray(objInput) )
            {
                objInput = [ objInput ];

                forLoop(objInput);
            }

            else if ( Array.isArray(objInput) )
            {
                forLoop(objInput);
            };
        };

//________________________________________________________________________________
//  INPUT ITEMS ARRAY CHECK

        function forLoop(LIST_bounding_boxes)
        {

            for (let i = 0; i < LIST_bounding_boxes.length; i++)
            {

                let obj = LIST_bounding_boxes[i];

                let objInputObj;


                if ( obj instanceof v3d.Object3D )
                {
                    objInputObj = obj;
                }

                else
                {
                    objInputObj = app.scene.getObjectByName(obj);
                }

                // console.log('objInputObj: ',objInputObj);

                // let mesh = app.scene.getObjectByName(objInput);

                let mesh = objInputObj;

                // mesh.userData = 'no collision.';

                //mesh.userData = {};

                //mesh.userData.collision = null;


                let box3Bbox = new v3d.Box3();
                let box3BboxName = mesh.name + '_Box3';

                box3Bbox.name = box3BboxName;
                box3Bbox.id = mesh.name;

                box3Bbox.userData = {};
                // box3Bbox.userData.collision = 'unknown';
                box3Bbox.userData.collision = false;

                box3Bbox.userData.previousObjectTouched = null;

                box3Bbox.userData.touchingObject = null;

                box3Bbox.userData.touchingObjects = [];

                // console.log('box3Bbox.userData.collision: ',box3Bbox.userData.collision)
                // console.log('box3Bbox.userData.touchingObject: ',box3Bbox.userData.touchingObject)

                mesh.geometry.computeBoundingBox();
                box3Bbox.copy(mesh.geometry.boundingBox).applyMatrix4(mesh.matrixWorld);

                if (!window.LIST_Box3s)
                {
                    window.LIST_Box3s = [];
                    window.LIST_Box3s.push(box3Bbox);
                }

                else
                {
                    window.LIST_Box3s.push(box3Bbox);
                };

                let box3HelperMade;

                if ( box3HelperCheckbox == true )
                {
                    let box3BboxHelperName = box3Bbox.name + "_Helper";
                    var box3Helper = new v3d.Box3Helper(box3Bbox, color);
                    box3Helper.raycast = function() {};
                    box3Helper.name = box3BboxHelperName;


                    app.scene.add(box3Helper);
                    box3HelperMade = true;
                };

            };

        };//    END forLoop(LIST_bounding_boxes);


//________________________________________________________________________________
        };  // END mainFunction
//________________________________________________________________________________

    }).apply(null, arguments);
}



// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}


// Describe this function...
function MAIN() {

          createGridHelper
          (
              10,
              10,
              'gray',
              'black'
          )
      LIST_Objects = getObjectsFrom(['GROUP', 'Cubes'], 'ALL');

          createBoundingBoxWithHelper
          (
              LIST_Objects,
              true,
              '#00cccc'
          );for (var j_index in LIST_Objects) {
    j = LIST_Objects[j_index];
    changeVis(String(j) + '_Box3_Helper', false);
  }
  TEXT_READOUT();
  SET_DICT_OBJECT_COLORS();
  GET_SELECTED_OBJECT();
}


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {

    var win = isParent ? window.parent : window;

    var elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    var targetElem = getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}


// Describe this function...
function TEXT_READOUT() {
  readout_for_selected_object = 'Drag objects to touch.';
  addHTMLElement('div', 'readout_for_selected_object', 'TO', ['CONTAINER'], false);
  setHTMLElemStyle('color', 'white', 'readout_for_selected_object', false);
  readout_for_all_objects = '';
  addHTMLElement('div', 'readout_for_all_objects', 'TO', ['CONTAINER'], false);
  setHTMLElemStyle('color', 'white', 'readout_for_all_objects', false);
}


// getObjectMaterial puzzle
function getObjectMaterial(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        obj = obj.resolveMultiMaterial()[0];

        if (obj.material && typeof obj.material.name == "string")
            return obj.material.name;
    }
    return '';
}



function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// getMaterialColor puzzle
function getMaterialColor(matName, colName, coord) {

    var colors = matGetColors(matName);
    if (colors.indexOf(colName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    if (mats.length) {

        var mat = mats[0];
        var color = _pGlob.colorTmp;

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];

            color.r = mat.nodeRGB[rgbIdx].x;
            color.g = mat.nodeRGB[rgbIdx].y;
            color.b = mat.nodeRGB[rgbIdx].z;

        } else {

            color.copy(mat[colName]);

        }

        switch (coord) {
            case 'R':
            case 'G':
            case 'B':
                return color[coord.toLowerCase()];
                break;
            case 'RGB':
                return color.toArray();
                break;
            case 'CSS_HEX':
            case 'CSS_RGB':
                color.convertLinearToSRGB();

                if (coord == 'CSS_HEX')
                    return '#' + color.getHexString();
                else
                    return color.getStyle();
                break;
        }
    }

}



// dictSet puzzle
function dictSet(dict, key, value) {
    if (dict && typeof dict == 'object')
        dict[key] = value;
}


// Describe this function...
function SET_DICT_OBJECT_COLORS() {
  /* This records all the object's original colors */
  DICT_object_colors = {};
  for (var object_for_color_index in LIST_Objects) {
    object_for_color = LIST_Objects[object_for_color_index];
    dictSet(DICT_object_colors, object_for_color, getMaterialColor(getObjectMaterial(object_for_color), 'Principled BSDF Color', 'CSS_HEX'));
  }
}


// getActiveCamera puzzle
function getActiveCamera() {
    var camera = appInstance.getCamera();
    return camera.name;
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();





function initGetCameraDirection() {
    var coordsCallback = function(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
    }

    var elem = appInstance.container;
    elem.addEventListener('mousemove', coordsCallback);
    elem.addEventListener('mousedown', coordsCallback);
    elem.addEventListener('mouseup', coordsCallback);
    elem.addEventListener('touchstart', coordsCallback);
    elem.addEventListener('touchend', coordsCallback);

    if (v3d.PL.editorEventListeners) {
        v3d.PL.editorEventListeners.push([elem, 'mousemove', coordsCallback]);
        v3d.PL.editorEventListeners.push([elem, 'mousedown', coordsCallback]);
        v3d.PL.editorEventListeners.push([elem, 'mouseup', coordsCallback]);
        v3d.PL.editorEventListeners.push([elem, 'touchstart', coordsCallback]);
        v3d.PL.editorEventListeners.push([elem, 'touchend', coordsCallback]);
    }

};

initGetCameraDirection();




// getCameraDirection puzzle
var getCameraDirection = function() {

    var coords = new v3d.Vector2();
    var vec = new v3d.Vector3();

    return function getCameraDirection(useMouseTouch, inverted) {
        var camera = appInstance.getCamera(true);

        if (useMouseTouch) {

            if (inverted) {
                coords.x = -_pGlob.screenCoords.x;
                coords.y = -_pGlob.screenCoords.y;
            } else {
                coords.x = _pGlob.screenCoords.x;
                coords.y = _pGlob.screenCoords.y;
            }

            _pGlob.raycasterTmp.setFromCamera(coords, camera);
            var dir = _pGlob.raycasterTmp.ray.direction;

        } else {
            var dir = camera.getWorldDirection(vec);
        }

        return coordsTransform(dir, 'Y_UP_RIGHT', getCoordSystem()).toArray();
    }
}();



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// raycast puzzle
function raycast2(fromPosObj, dir, intersectObjsSelector) {

    if (!fromPosObj || !dir) {
        console.error('raycast: missing input');
        return [];
    }

    if (Array.isArray(fromPosObj)) {
        var from = _pGlob.vec3Tmp.fromArray(fromPosObj);
        from = coordsTransform(from, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var posObj = getObjectByName(fromPosObj);
        if (!posObj) {
            console.error('raycast: raycast object not found');
            return []
        }
        var from = posObj.getWorldPosition(_pGlob.vec3Tmp);
    }

    dir = _pGlob.vec3Tmp2.fromArray(dir);
    dir = coordsTransform(dir, getCoordSystem(), 'Y_UP_RIGHT');

    if (intersectObjsSelector === '' || intersectObjsSelector === LIST_NONE) {

        var objs = [appInstance.scene];

    } else {

        var objs = retrieveObjectNames(intersectObjsSelector).map(function(objName) {
            return getObjectByName(objName);
        });

    }

    if (objs.length) {
        _pGlob.raycasterTmp.set(from, dir);
        var intersects = _pGlob.raycasterTmp.intersectObjects(objs, true);

        for (var i = 0; i < intersects.length; i++) {
            var int = intersects[i];

            int.object = getPickedObjectName(int.object);
            int.point = coordsTransform(int.point, 'Y_UP_RIGHT', getCoordSystem()).toArray();

            if (int.face)
                int.normal = coordsTransform(int.face.normal, 'Y_UP_RIGHT', getCoordSystem()).toArray();

            if (int.uv)
                int.uv = int.uv.toArray();

            delete int.face;
            delete int.faceIndex;

        }

        return intersects;
    } else {
        return [];
    }
}



// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}


// Describe this function...
function GET_SELECTED_OBJECT() {
  /* Detect if mouse/touch is being pressed or released upon the object. */
  eventHTMLElem('pointerdown', ['CONTAINER'], false, function(event) {
    for (var object_in_list_index in LIST_Objects) {
      object_in_list = LIST_Objects[object_in_list_index];
      raycast = raycast2(getActiveCamera(), getCameraDirection(true, false), object_in_list);
      if (raycast.length > 0 && dictGet(raycast[0], 'object') == object_in_list) {
        selected_object = object_in_list;
        changeVis(String(selected_object) + '_Box3_Helper', true);
        DRAG_OBJECT();
      }
    }
  });
  eventHTMLElem('pointerup', ['CONTAINER'], false, function(event) {
    changeVis(String(selected_object) + '_Box3_Helper', false);
    selected_object = null;
  });
}


function getBoundingBoxTouchingObject() {
    return (function

//____________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    ( objInput )

    {   // BEGIN provideFunction_
//____________________________________________________________________________________
//  PUZZLE CORE CODE

        let objInputObj, objInputObjBox3, touchingObject;

        //  NO INPUT ERROR CHECK
        if ( !objInput || objInput == '<none>' ) {
            console.log('Get Touching Object Puzzle needs an object!');
        }   else    { mainFunction () };


        function mainFunction()
        {

            if ( objInput instanceof v3d.Object3D ) {
                objInputObj = objInput;
            }   else {
                objInputObj = app.scene.getObjectByName(objInput);
            }

            let objInputName = objInputObj.name + "_Box3";

            window.LIST_Box3s.forEach((Box3) => {

                if (Box3.name == objInputName)   {

                    touchingObject =  Box3.userData.touchingObject;

                }
            });

        };  //  END mainFunction

//____________________________________________________________________________________
// PUZZLE OUTPUT

        return touchingObject;

    }).apply(null, arguments);
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



function getListOfAllTouchingObjects() {
    return (function
//____________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        // objInput
    )
    {
//________________________________________________________________________________
//  DECLARE VARIABLES

    const puzzleName = 'Get List Of All Touching Objects';

    let LIST_touchingObjects = [];
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

    // if ( !objInput || objInput == '<none>' ) {
    //     console.log('[ GLIFTEK ]: The',puzzleName, 'plugin puzzle is missing an input!');
    // }   else    { mainFunction () };

//________________________________________________________________________________
//  BEGIN mainFunction

        mainFunction();

        function mainFunction()
        {

//________________________________________________________________________________
//  CORE CODE

            // window.LIST_Box3s.forEach((Box3) =>
            // {
            //     // let object = app.scene.getObjectByName(Box3.id);

            //     let touchingObject = Box3.userData.touchingObject;

            //     if ( touchingObject !== null )
            //     {
            //         LIST_touchingObjects.push(Box3.id);
            //     }

            // });

            window.LIST_Box3s.forEach((Box3) =>
            {
                // let object = app.scene.getObjectByName(Box3.id);

                let collision = Box3.userData.collision;

                if ( collision == true )
                {
                    LIST_touchingObjects.push(Box3.id);
                    // LIST_Box3s_Touching.push(Box3.id);
                }

            });

            // let collision = Box3.userData.collision;

            //     if ( collision == true )
            //     {

            //     }


            //     else if ( collision == false )
            //     {
            //         LIST_Box3s_NOT_Touching.push(Box3.id);
            //     }

//________________________________________________________________________________
        };  // END mainFunction
//____________________________________________________________________________________
// PUZZLE OUTPUT

    return LIST_touchingObjects;

    // if ( typeof window.LIST_Box3s_Touching !== 'undefined' )
    // {
    //     return window.LIST_Box3s_Touching;
    // }

    }).apply(null, arguments);
}


// Describe this function...
function UPDATE_READOUT(touching) {
  touched_object =
          getBoundingBoxTouchingObject
          (
              selected_object
          );
          ;
  readout_for_selected_object = touching ? ['Selected object ',selected_object,' is touching ',touched_object].join('') : 'Drag objects to touch.';
  setHTMLElemAttribute('innerHTML', readout_for_selected_object, 'readout_for_selected_object', false);
  LIST_all_touching_objects =

          getListOfAllTouchingObjects
          (

          );
          ;
  readout_for_all_objects = 'All touching objects: ' + String(LIST_all_touching_objects);
  setHTMLElemAttribute('innerHTML', readout_for_all_objects, 'readout_for_all_objects', false);
}


function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.getCamera(true));
    return rc.ray.intersectPlane(plane, dest);
}



// dragMove puzzle
_pGlob.dragMoveOrigins = {};

function dragMove(objSelector, mode, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera();
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}



function boundingBoxCollisionSensor() {
    return (function

//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        objInput,
        otherObjsInput,
        whenTouching_Do_Statement_Input,
        when_NOT_Touching_Do_Statement_Input
    )
    {
//________________________________________________________________________________
//  DECLARE VARIABLES

        const puzzleName = 'Bounding Box Collision Sensor';

//________________________________________________________________________________
//  NO INPUT ERROR CHECK

        // if ( !objInput || objInput == '<none>' ) {
        //     console.log('[ GLIFTEK ]: The',puzzleName, 'plugin puzzle is missing an input!');
        // }   else    { mainFunction () };

//________________________________________________________________________________
//  BEGIN mainFunction

        mainFunction()

        function mainFunction()
        {

//________________________________________________________________________________
//  INITIAL ARRAY CHECK

            let collisionTrueStatement = whenTouching_Do_Statement_Input;
            let afterCollisionStatement = when_NOT_Touching_Do_Statement_Input;

            let result = false;

            let LIST_otherObjsBox3 = [];
            let objInputObj, objInputObjBox3, LIST_otherObjsInput;


//________________________________________________________________________________

            if ( objInput instanceof v3d.Object3D ) {
                objInputObj = objInput;
            }   else {
                objInputObj = app.scene.getObjectByName(objInput);
            }

            let objInputBox3Name = objInputObj.name + "_Box3";



            window.LIST_Box3s.forEach((Box3) => {

                let object = app.scene.getObjectByName(Box3.id);

                    Box3.copy(object.geometry.boundingBox)
                    .applyMatrix4(object.matrixWorld);


                if (Box3.name == objInputBox3Name)   {
                    objInputObjBox3 = Box3;
                }
            });



            //  CHECK IF OTHEROBJESINPUT IS ARRAY OR SINGLE OBJECT
            //  AND MAKE LIST FOR EITHER
            if (Array.isArray(otherObjsInput))
            {

                // MAKE LIST OF THE ARRAY OBJECT INPUT
                LIST_otherObjsInput = otherObjsInput;
                otherObjsInput = null;

                // CREATE LIST FROM CORRESPONDING BOX3'S
                //  WITHOUT DRAGGED OBJECT IF PRESENT IN OTHER OBJECTS
                LIST_otherObjsInput.forEach((otherObjsInput) => {

                    if ( otherObjsInput !== objInput ) {

                        if ( !otherObjsInput instanceof v3d.Mesh ) {
                            otherObjsInput = app.scene.getObjectByName(otherObjsInput);
                        }

                        let otherObjsInputName = otherObjsInput + "_Box3";

                        window.LIST_Box3s.forEach((Box3) => {
                            if (Box3.name == otherObjsInputName)   {
                                otherObjsInput = Box3;
                                LIST_otherObjsBox3.push(otherObjsInput);
                            }
                        });
                    };

                });

            }   else
            {

                // CREATE SINGLE ITEM LIST FROM CORRESPONDING BOX3
                let otherObjsInputName = otherObjsInput + "_Box3";

                window.LIST_Box3s.forEach((Box3) => {
                    if (Box3.name == otherObjsInputName)   {
                        otherObjsInput = Box3;
                        LIST_otherObjsBox3.push(otherObjsInput);
                    }
                });
            };




        function collisionSensorFunction(i)
        {

            let objBox3 = LIST_otherObjsBox3[i];


            let LIST_touchingObjects = objInputObjBox3.userData.touchingObjects;



            let intersectionBoolean = objInputObjBox3.intersectsBox(objBox3);

            // console.log('COLLISION SENSOR PLUGIN - intersectionBoolean:',intersectionBoolean);

            // if (objInputObjBox3.intersectsBox(objBox3))
            if ( intersectionBoolean == true )
            {


                result = true;

                objInputObjBox3.userData.collision = true;



                // objInputObjBox3.userData.touchingObject = objBox3.name.slice(0, -5);

                objInputObjBox3.userData.touchingObject = objBox3.id;

                objInputObjBox3.userData.previousObjectTouched = objBox3.id;





                // CHECKS IF TOUCHING OBJECT IS IN TOUCHING OBJECT LIST

                let indexOf_object_in_touchingObjects_list = LIST_touchingObjects.indexOf(objBox3.id);

                console.log( 'indexOf_object_in_touchingObjects_list', indexOf_object_in_touchingObjects_list );




                //  IF OBJECT IS NOT IN TOUCHING OBJECT LIST THEN ADD IT TO THE LIST
                if ( indexOf_object_in_touchingObjects_list == -1 )
                {
                    LIST_touchingObjects.push(objBox3.id);
                }


                //  IF OBJECT IS IN TOUCHING OBJECT LIST THEN REMOVE IT FROM THE LIST
                else if ( indexOf_object_in_touchingObjects_list > -1 )
                {
                    LIST_touchingObjects.splice(indexOf_object_in_touchingObjects_list, 1);
                }



                objBox3.userData.collision = true;

                objBox3.userData.touchingObject = objInputObjBox3.name.slice(0, -5);

                collisionTrueStatement();

                return result;


            }



            // else if (!objInputObjBox3.intersectsBox(objBox3))
            else if ( intersectionBoolean == false )
            {

                objInputObjBox3.userData.collision = false;

                // objInputObjBox3.userData.touchingObject = 'not touching input object(s)';

                objInputObjBox3.userData.touchingObject = null;


                objBox3.userData.collision = false;

                objBox3.userData.touchingObject = null;





                // CHECKS IF TOUCHING OBJECT IS IN TOUCHING OBJECT LIST

                let LIST_touchingObjects = objInputObjBox3.userData.touchingObjects;

                let object_in_touchingObjects_list = LIST_touchingObjects.includes(objBox3.id);


                console.log( 'object_in_touchingObjects_list', object_in_touchingObjects_list );

                if ( !object_in_touchingObjects_list )
                {
                    LIST_touchingObjects.push(objBox3.id);
                }






            // if (objInputObjBox3.userData.collision)  {

            //     objInputObjBox3.userData.collision = false;

                afterCollisionStatement();

            };

        };


        console.log('COLLISION SENSOR PLUGIN - LIST_otherObjsBox3:',LIST_otherObjsBox3);

        // LOOP THROUGH non-selected BOX3s TO COMPARE WITH OTHER OBJECTS
        for (let i = 0; i < LIST_otherObjsBox3.length; i++)
        // for (let i = 0; i < LIST_Box3s.length; i++)
        {

            let result = collisionSensorFunction(i);
            if (result) break;

        };


//________________________________________________________________________________
        };  // END mainFunction
//________________________________________________________________________________

    }).apply(null, arguments);
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);



// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            elem.removeEventListener('mousemove', moveCb);
            elem.removeEventListener('touchmove', moveCb);
            elem.removeEventListener('mouseup', upCb);
            elem.removeEventListener('touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener('mousemove', moveCb);
        elem.addEventListener('touchmove', moveCb);
        elem.addEventListener('mouseup', upCb);
        elem.addEventListener('touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}


// Describe this function...
function DRAG_OBJECT() {
  registerOnDrag(selected_object, false, [0,1,2], function() {}, function() {
    dragMove(selected_object, 'XY', 'Z^C=Xi|qdW%.JCqufKIz', '1WK(5ZSh~}Sf{yun-naT');

            boundingBoxCollisionSensor
            (
                selected_object,
                LIST_Objects,
                function() {  UPDATE_READOUT(true);
    },
                function() {  UPDATE_READOUT(false);
    }
            );CHANGE_COLORS_OF_ALL();
  }, function() {}, '1WK(5ZSh~}Sf{yun-naT');
}


// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



function getListOfAllNONTouchingObjects() {
    return (function
//____________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        // objInput
    )
    {
//________________________________________________________________________________
//  DECLARE VARIABLES

    const puzzleName = 'Get List Of All Touching Objects';

    let LIST_NONtouchingObjects = [];
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

    // if ( !objInput || objInput == '<none>' ) {
    //     console.log('[ GLIFTEK ]: The',puzzleName, 'plugin puzzle is missing an input!');
    // }   else    { mainFunction () };

//________________________________________________________________________________
//  BEGIN mainFunction

        mainFunction();

        function mainFunction()
        {

//________________________________________________________________________________
//  CORE CODE

            // window.LIST_Box3s.forEach((Box3) =>
            // {
            //     // let object = app.scene.getObjectByName(Box3.id);

            //     let touchingObject = Box3.userData.touchingObject;

            //     if ( touchingObject == null )
            //     {
            //         LIST_NONtouchingObjects.push(Box3.id);
            //     }

            // });


            window.LIST_Box3s.forEach((Box3) =>
            {
                // let object = app.scene.getObjectByName(Box3.id);

                let collision = Box3.userData.collision;

                if ( collision == false )
                {
                    LIST_NONtouchingObjects.push(Box3.id);
                    // LIST_Box3s_NOT_Touching.push(Box3.id);
                }

            });

//________________________________________________________________________________
        };  // END mainFunction
//____________________________________________________________________________________
// PUZZLE OUTPUT

    return LIST_NONtouchingObjects;
    // return window.LIST_Box3s_NOT_Touching;
    // if ( typeof window.LIST_Box3s_NOT_Touching !== 'undefined' )
    // {
    //     return window.LIST_Box3s_NOT_Touching;
    // }

    }).apply(null, arguments);
}


// Describe this function...
function CHANGE_COLORS_OF_ALL() {
  /* This changes all of the object's colors depending on whether they are touching or not. */
  for (var object_touching_index in LIST_all_touching_objects) {
    object_touching = LIST_all_touching_objects[object_touching_index];
    setMaterialColor(getObjectMaterial(object_touching), 'Principled BSDF Color', 0, 0, 0, 'yellow');
  }
  var object_NOT_touching_list =

          getListOfAllNONTouchingObjects
          (

          );
          ;
  for (var object_NOT_touching_index in object_NOT_touching_list) {
    object_NOT_touching = object_NOT_touching_list[object_NOT_touching_index];
    setMaterialColor(getObjectMaterial(object_NOT_touching), 'Principled BSDF Color', 0, 0, 0, dictGet(DICT_object_colors, object_NOT_touching));
  }
}


/* PUZZLE ARRANGEMENT STARTS HERE */
MAIN();



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
