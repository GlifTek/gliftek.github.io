/**
 * Generated by Verge3D Puzzles v.3.8.1
 * Sat Oct 09 2021 21:11:26 GMT-0400 (Eastern Daylight Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    this.procedures["LOAD_MODAL_FONTS"] = LOAD_MODAL_FONTS;

    var PROC = {
    "LOAD_MODAL_FONTS": LOAD_MODAL_FONTS,
};


// loadFont puzzle
function loadFont(url, family) {

    if (!url || !family)
        return;

    // register in CSS
    var elemStyle = document.createElement('style');
    elemStyle.innerHTML = '@font-face { font-family: ' + family
        + '; src: url(' + url + '); }';
    document.body.appendChild(elemStyle);

    // preload font
    var elemDiv = document.createElement('div');
    elemDiv.innerHTML = 'invisible text';
    elemDiv.style.visibility = 'hidden';
    elemDiv.style.fontFamily = family;
    document.body.appendChild(elemDiv);
}


// Describe this function...
function LOAD_MODAL_FONTS() {
  loadFont('./fonts/KrinkesDecorPERSONAL.ttf', 'KrinkesDecorPERSONAL');
  loadFont('./fonts/Long_Shot.ttf', 'Long_Shot');
  loadFont('./fonts/Flux_Architect_Regular.ttf', 'Flux_Architect_Regular');
  loadFont('./fonts/Reza Zulmi Sans.ttf', 'Reza_Zulmi_Sans');
  loadFont('./fonts/Road_Rage.otf', 'Road_Rage');
  loadFont('./fonts/trebuc.ttf', 'trebuc');
  loadFont('./fonts/Atami-Regular.otf', 'Atami-Regular');
}


LOAD_MODAL_FONTS();


// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = true;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["MAIN"] = MAIN;
this.procedures["SETUP_MODAL_FONT_VARIABLES"] = SETUP_MODAL_FONT_VARIABLES;
this.procedures["OPEN_MODALS_PLUGIN"] = OPEN_MODALS_PLUGIN;
this.procedures["MAKE_MODAL_OPEN_BUTTON_1"] = MAKE_MODAL_OPEN_BUTTON_1;
this.procedures["GET_STATUS_OF_MODALS"] = GET_STATUS_OF_MODALS;
this.procedures["SET_STATUS_BUTTON"] = SET_STATUS_BUTTON;
this.procedures["MODAL_1_MAIN"] = MODAL_1_MAIN;
this.procedures["MODAL_2_MAIN"] = MODAL_2_MAIN;
this.procedures["ADD_ANNOTATION_OPEN_MODAL_3"] = ADD_ANNOTATION_OPEN_MODAL_3;
this.procedures["MODAL_3_MAIN"] = MODAL_3_MAIN;
this.procedures["ADD_ANNOTATION_OPEN_MODAL_2"] = ADD_ANNOTATION_OPEN_MODAL_2;
this.procedures["ADD_ANNOTATIONS"] = ADD_ANNOTATIONS;
this.procedures["SET_MODAL_1_SETTINGS"] = SET_MODAL_1_SETTINGS;
this.procedures["SETUP_MODAL_1"] = SETUP_MODAL_1;
this.procedures["SET_MODAL_2_SETTINGS"] = SET_MODAL_2_SETTINGS;
this.procedures["SETUP_MODAL_2"] = SETUP_MODAL_2;
this.procedures["SET_MODAL_3_SETTINGS"] = SET_MODAL_3_SETTINGS;
this.procedures["SETUP_MODAL_3"] = SETUP_MODAL_3;
this.procedures["SETUP_MODALS"] = SETUP_MODALS;

var PROC = {
    "MAIN": MAIN,
    "SETUP_MODAL_FONT_VARIABLES": SETUP_MODAL_FONT_VARIABLES,
    "OPEN_MODALS_PLUGIN": OPEN_MODALS_PLUGIN,
    "MAKE_MODAL_OPEN_BUTTON_1": MAKE_MODAL_OPEN_BUTTON_1,
    "GET_STATUS_OF_MODALS": GET_STATUS_OF_MODALS,
    "SET_STATUS_BUTTON": SET_STATUS_BUTTON,
    "MODAL_1_MAIN": MODAL_1_MAIN,
    "MODAL_2_MAIN": MODAL_2_MAIN,
    "ADD_ANNOTATION_OPEN_MODAL_3": ADD_ANNOTATION_OPEN_MODAL_3,
    "MODAL_3_MAIN": MODAL_3_MAIN,
    "ADD_ANNOTATION_OPEN_MODAL_2": ADD_ANNOTATION_OPEN_MODAL_2,
    "ADD_ANNOTATIONS": ADD_ANNOTATIONS,
    "SET_MODAL_1_SETTINGS": SET_MODAL_1_SETTINGS,
    "SETUP_MODAL_1": SETUP_MODAL_1,
    "SET_MODAL_2_SETTINGS": SET_MODAL_2_SETTINGS,
    "SETUP_MODAL_2": SETUP_MODAL_2,
    "SET_MODAL_3_SETTINGS": SET_MODAL_3_SETTINGS,
    "SETUP_MODAL_3": SETUP_MODAL_3,
    "SETUP_MODALS": SETUP_MODALS,
};

var modal_OPEN_button_1_ID, modal_in_list, modal_1_BODY_IMAGE, modal_2_BODY_IMAGE, modal_3_BODY_IMAGE, font_1, modal_OPEN_button_2_ID, modal_1_BODY_VIDEO, modal_1_width, modal_1_HEADER_TEXT_settings, modal_1_FOOTER_TEXT_settings, modal_1_BODY_TEXT_settings, modal_1_BODY_MEDIA_settings, modal_1_ANIMATION_settings, modal_1_position_TOP, modal_1_position_LEFT, modal_2_BODY_VIDEO, modal_2_HEADER_settings, modal_2_FOOTER_settings, modal_2_BODY_TEXT_settings, modal_2_BODY_MEDIA_settings, modal_2_ANIMATION_settings, modal_3_BODY_VIDEO, modal_3_HEADER_TEXT_settings, modal_3_FOOTER_TEXT_settings, modal_3_BODY_TEXT_settings, modal_3_BODY_MEDIA_settings, modal_3_ANIMATION_settings, font_2, modal_1_body_text, modal_2_body_text, modal_3_body_text, font_3, modal_1_BODY_Extra_CSS, modal_2_header_text, modal_3_header_text, font_4, modal_1_header_text, modal_2_footer_text, modal_3_footer_text, font_5, modal_1_footer_text, font_6, font_7, modal_1_position_offscreen;

// Describe this function...
function SETUP_MODAL_FONT_VARIABLES() {
  /* FONTS ARE LOADED IN INIT TAB */
  font_1 = 'KrinkesDecorPERSONAL';
  font_2 = 'Long_Shot';
  font_3 = 'Flux_Architect_Regular';
  font_4 = 'Reza_Zulmi_Sans';
  font_5 = 'Road_Rage';
  font_6 = 'trebuc';
  font_7 = 'Atami-Regular';
}


function generateGradientBackground() {
    return (function(a,b,c,d,e,f,g,h,i,j,k){(function(){function l(a,b){const c=m,d=function(){let a=!0;return function(b,c){const d=a?function(){const a=m;if(c){const d=c[a(424)](b,arguments);return c=null,d}}:function(){};return a=!1,d}}(),e=d(this,function(){const a=m;return e.toString().search(a(414))[a(420)]()[a(418)](e)[a(401)](a(414))});e();let f;return f=typeof a==c(409)||null==typeof a||""==a?b[c(423)](1):a.substring(1),f}function m(a,b){const c=n();return m=function(a){a-=397;let b=c[a];return b},m(a,b)}function n(){const a=["247949oPUaxw","7985925VpnTIJ","fill='url(%23linear-gradient)'/%3E%3Cpath d='M639,1V639H1V1H639m1-1H0V640H640V0Z'/%3E%3C/svg%3E\n            ","4SStlZK","scene","506WhWXCl","5ZqOIOf","235442DqhKDG","\n            ","6EbCHlO","search","%3Crect x='0' y='0' width='640' height='640' ","LinearFilter","background","\n        data:image/svg+xml,%3Csvg id='bg_gradient' data-name='bg_gradient' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='640' height='640' viewBox='0 0 640 640'%3E\n        ","%3Cdefs%3E%3ClinearGradient id='linear-gradient' x1='320' y1='0' x2='320' y2='640' gradientUnits='userSpaceOnUse'%3E%3Cstop offset='","' stop-color='%23","4975629wDscIS","undefined","%3Cstop offset='","minFilter","42744TMtIYK","' /%3E","(((.+)+)+)+$","gradientRadial","gradientLinear","170bocSmC","constructor","encoding","toString","1974OoMlOv","\n            %3Cstop offset='","substring","apply","5352529dhZMVl","16kqIcuk","'/%3E","'/%3E\n            ","375588bRtYqN"];return n=function(){return a},n()}const o=m;(function(a,b){for(const c=m,d=a();;)try{const a=-parseInt(c(397))/1*(-parseInt(c(398))/2)+parseInt(c(408))/3*(parseInt(c(433))/4)+parseInt(c(431))/5*(-parseInt(c(400))/6)+parseInt(c(425))/7*(-parseInt(c(426))/8)+parseInt(c(429))/9*(-parseInt(c(417))/10)+-parseInt(c(435))/11*(parseInt(c(412))/12)+-parseInt(c(430))/13*(-parseInt(c(421))/14);if(a===b)break;else d.push(d.shift())}catch(a){d.push(d.shift())}})(n,936666);const p=l(f,c),q=l(h,e);let r,s,t;const u=o(405),v=o(402);!0==b?(s=l(g,d),t=o(422)+j+o(407)+s+o(428)):!1==b&&(t=""),a==o(416)?r=o(399)+u+o(406)+i+"' stop-color='%23"+p+o(427)+t+o(410)+k+o(407)+q+"'/%3E%3C/linearGradient%3E%3C/defs%3E"+v+o(432):a==o(415)&&(r=o(399)+u+"%3Cdefs%3E%3CradialGradient id='radial-gradient' cx='320' cy='320' r='320' gradientUnits='userSpaceOnUse'%3E%3Cstop offset='"+i+o(407)+p+o(413)+t+o(410)+k+"' stop-color='%23"+q+"' /%3E%3C/radialGradient%3E%3C/defs%3E"+v+"fill='url(%23radial-gradient)' /%3E%3Cpath d='M639,1V639H1V1H639m1-1H0V640H640V0Z' /%3E%3C/svg%3E\n            ");let w=new THREE.TextureLoader().load(r);w[o(411)]=THREE[o(403)],app[o(434)][o(404)]=w,app[o(434)][o(404)][o(419)]=THREE.sRGBEncoding})()}).apply(null, arguments);
}



function screenFade() {
    return (function(screenFade_ID_Input,screenFade_Z_Index_Input,typeDropdown,screenFade_Pause_Input,screenFade_Duration_Input,colorInput_1_PICKER,colorInput_1_TEXT,delete_When_Done_Checkbox,whenDone_Statement_Input){function _0x7c71(){const a=["2pMpOpu","2916108JRvgIC","1765869OWiyMh","8iyPcCs","10kAdAZg","397044bCHJTx","3689742XfBsqC"," = { faded: null };","search","24322397PtEiNE","(((.+)+)+)+$","414110WJXqON","Print To Modal Card","315yFzWUM","toString","1746042aPVLJZ"];return _0x7c71=function(){return a},_0x7c71()}function _0x71ee(a,b){const c=_0x7c71();return _0x71ee=function(a){a-=256;let b=c[a];return b},_0x71ee(a,b)}function _0xbf24(a,b){var c=_0x53e1();return _0xbf24=function(a){a-=264;var b=c[a];return b},_0xbf24(a,b)}function _0x53e1(){var a=["1311891RcPyCX","[ GLIFTEK ]: The","5bWXVzC","133090WSKWba","1571812pyFXkS","3000YtAwpK","3615xgDCnt","constructor","apply","32gYLEMk","19099575aZFhJf","1848416loSDub","toString","7306482FIDRSW","log","(((.+)+)+)+$","plugin puzzle is missing an input!","162jAbPoC","search"];return _0x53e1=function(){return a},_0x53e1()}function mainFunction(){function _0x13f6(){const a=["906XqJhym","(((.+)+)+)+$","1259857uTDaOH","supplied. using TEXT.","1485134skCtWf","substring","computedColorDiv-","createElement","div","appendChild","search","40263010UvGJcf","rgba(","8040jBNliY","length","874770pJqkZK","colorInput_1esc:","computedColor for: ","rgba(0, 0, 0, 0)","apply","style","4410GnMRUv","body","color","undefined","5085OuVcac","log","remove","6739816oUqQFn","10qctQEK","constructor","supplied. using PICKER.","toString"];return _0x13f6=function(){return a},_0x13f6()}function _0x54b5(a,b){const c=_0x13f6();return _0x54b5=function(a){a-=194;let b=c[a];return b},_0x54b5(a,b)}function setColorFromInputs(a,b){const c=_0x54b5;let d;return typeof a==c(197)||null==typeof a||""==a?(d=b,console[c(199)](b,c(204))):(d=a,console[c(199)](a,c(209))),d}function RGBA_from_color_input(a,b){const c=_0x539e60,d=function(){let a=!0;return function(b,c){const d=a?function(){const a=_0x54b5;if(c){const d=c[a(225)](b,arguments);return c=null,d}}:function(){};return a=!1,d}}(),e=d(this,function(){const a=_0x54b5;return e[a(205)]()[a(216)](a(207))[a(205)]()[a(203)](e).search(a(207))});if(e(),"transparent"==a||null==a||typeof a==c(197))return c(224);else{computedColorDiv[c(226)][c(196)]=a;let d=window.getComputedStyle(computedColorDiv)[c(196)];console.log(c(223),a,":",d);let e=d[c(220)],f=c(218)+d[c(211)](4,e-1)+", "+b+")";return console[c(199)]("computedColor_RGBA for: ",a,":",f),f}}function _0x3234(){const a=["1204716wBcWaS","appendChild","remove","screenFade_Div.style.backgroundColor:","(((.+)+)+)+$","className","backgroundColor","log","innerHTML","\n                {\n                    from {            \n                        background-color: rgba(0,0,0,0);\n                    }\n                    to {                    \n                        background-color: ","animationend","head","524909wWMGkt","1368466HYWvPg","screenFade-","rgba(0,0,0,0)","display","5016319txFclU","screenFade_Div.style.animationName:","apply","search","v3d-container","block","removeEventListener","3ckzQfU","constructor","17784fWdrTU","createElement","out","3712080YOPEdh","8QGmUIr",";   \n                    }\n                    to {\n                        background-color: rgba(0,0,0,0);\n                    }\n                }\n\n                ","none","10FVBmNn",".faded = '","animationName","screenFade_Div.style.display:",";\n                    left: 0;\n                    top: 0;\n                    height: 100%;\n                    width: 100%;\n                    overflow: hidden;\n                    pointer-events: none;\n\n                    animation-duration: ","998274tbBKZT","div","style","70uJsEPs"];return _0x3234=function(){return a},_0x3234()}function _0x4b25(a,b){const c=_0x3234();return _0x4b25=function(a){a-=354;let b=c[a];return b},_0x4b25(a,b)}function getBGcolor(){const a=_0x2f13b8,b=function(){let a=!0;return function(b,c){const d=a?function(){const a=_0x4b25;if(c){const d=c[a(389)](b,arguments);return c=null,d}}:function(){};return a=!1,d}}(),c=b(this,function(){const a=_0x4b25;return c.toString().search("(((.+)+)+)+$").toString()[a(395)](c)[a(390)](a(374))});c(),"in"==typeDropdown?(screenFade_Div[a(368)].backgroundColor=a(385),console[a(377)](a(373),screenFade_Div.style[a(376)])):typeDropdown==a(356)&&(screenFade_Div.style[a(376)]=screenFadeColor,console[a(377)](a(373),screenFade_Div.style[a(376)]))}function animateScreenFade(){function _0x51ad78(){const a=_0x1558e3;"in"==typeDropdown?(screenFade_Div[a(368)][a(386)]=a(392),console[a(377)](a(364),screenFade_Div[a(368)][a(386)]),_0x16af00()):typeDropdown==a(356)&&(screenFade_Div.style[a(386)]=a(360),console.log(a(364),screenFade_Div.style[a(386)]),_0x16af00())}function _0x16af00(){!0==delete_When_Done_Checkbox&&screenFade_Div[_0x1558e3(372)]()}const _0x1558e3=_0x2f13b8,_0x223f5b="animation-screen-fade-"+typeDropdown+"-"+screenFade_ID_Input;screenFade_Div.style.animationName=_0x223f5b,console[_0x1558e3(377)](_0x1558e3(388),screenFade_Div[_0x1558e3(368)][_0x1558e3(363)]),screenFade_Div.addEventListener(_0x1558e3(380),function(_0x36e418){const _0x4ca6c5=_0x1558e3;if(_0x36e418.animationName==_0x223f5b);{screenFade_Div[_0x4ca6c5(393)]("animationend",null),_0x51ad78();let _0x571d91=eval(screenFade_ID_Input+_0x4ca6c5(362)+typeDropdown+"';");console[_0x4ca6c5(377)]("screenFadeState:",_0x571d91),whenDone_Statement_Input()}})}function setstyleVar(){const a=_0x2f13b8;let b="\n                #computedColorDiv-"+screenFade_ID_Input+"\n                {\n                    height: 0px;\n                    width: 0px;\n                    display: none;\n                    z-index = -10;\n                }\n\n                .screenFade-"+screenFade_ID_Input+"\n                {\n                    display: block;                    \n                    position: fixed;\n                    z-index: "+screenFade_Z_Index_Input+a(365)+screenFade_Duration_Input+"s;\n                    animation-timing-function: ease-in-out;\n                }\n\n\n                @keyframes animation-screen-fade-in-"+screenFade_ID_Input+a(379)+screenFadeColor+";   \n                    }\n                }\n\n\n                @keyframes animation-screen-fade-out-"+screenFade_ID_Input+"\n                {\n                    from {            \n                        background-color: "+screenFadeColor+a(359);return b}const _0x539e60=_0x54b5;(function(a,b){for(const c=_0x54b5,d=a();;)try{const a=-parseInt(c(208))/1+-parseInt(c(206))/2*(parseInt(c(198))/3)+-parseInt(c(201))/4+parseInt(c(202))/5*(parseInt(c(221))/6)+-parseInt(c(210))/7+parseInt(c(219))/8*(parseInt(c(194))/9)+parseInt(c(217))/10;if(a===b)break;else d.push(d.shift())}catch(a){d.push(d.shift())}})(_0x13f6,885533);const colorInput_1esc=setColorFromInputs(colorInput_1_TEXT,colorInput_1_PICKER);console[_0x539e60(199)](_0x539e60(222),colorInput_1esc);let computedColorDiv=document[_0x539e60(213)](_0x539e60(214));computedColorDiv.id=_0x539e60(212)+screenFade_ID_Input,document[_0x539e60(195)][_0x539e60(215)](computedColorDiv);const screenFadeColor=RGBA_from_color_input(colorInput_1esc,1);console[_0x539e60(199)]("screenFadeColor: ",screenFadeColor),computedColorDiv[_0x539e60(200)]();const _0x2f13b8=_0x4b25;(function(a,b){for(const c=_0x4b25,d=a();;)try{const a=-parseInt(c(382))/1+parseInt(c(366))/2*(parseInt(c(394))/3)+parseInt(c(370))/4+parseInt(c(361))/5*(-parseInt(c(357))/6)+parseInt(c(387))/7*(parseInt(c(358))/8)+-parseInt(c(354))/9+-parseInt(c(369))/10*(-parseInt(c(383))/11);if(a===b)break;else d.push(d.shift())}catch(a){d.push(d.shift())}})(_0x3234,623530);let styleVar=setstyleVar(),style=document[_0x2f13b8(355)](_0x2f13b8(368));style.id=_0x2f13b8(384)+screenFade_ID_Input,style[_0x2f13b8(378)]=styleVar,document[_0x2f13b8(381)][_0x2f13b8(371)](style);let screenFade_Div=document[_0x2f13b8(355)](_0x2f13b8(367));screenFade_Div.id=screenFade_ID_Input,screenFade_Div[_0x2f13b8(375)]=_0x2f13b8(384)+screenFade_ID_Input,getBGcolor();const container=document.getElementById(_0x2f13b8(391));container[_0x2f13b8(371)](screenFade_Div),setTimeout(function(){animateScreenFade()},1e3*screenFade_Pause_Input)}const _0x285efc=_0x71ee;(function(a,b){for(const c=_0x71ee,d=a();;)try{const a=parseInt(c(262))/1+parseInt(c(257))/2*(-parseInt(c(263))/3)+parseInt(c(258))/4+parseInt(c(261))/5*(parseInt(c(256))/6)+parseInt(c(259))/7*(-parseInt(c(260))/8)+parseInt(c(270))/9*(-parseInt(c(268))/10)+parseInt(c(266))/11;if(a===b)break;else d.push(d.shift())}catch(a){d.push(d.shift())}})(_0x7c71,987646);const _0x5b3385=function(){let a=!0;return function(b,c){const d=a?function(){if(c){const a=c.apply(b,arguments);return c=null,a}}:function(){};return a=!1,d}}(),_0x39ae0e=_0x5b3385(this,function(){const a=_0x71ee;return _0x39ae0e[a(271)]()[a(265)](a(267))[a(271)]().constructor(_0x39ae0e).search("(((.+)+)+)+$")});_0x39ae0e();const puzzleName=_0x285efc(269);eval("window."+screenFade_ID_Input+_0x285efc(264));var _0x5e7414=_0xbf24;(function(a,b){for(var c=_0xbf24,d=a();;)try{var e=parseInt(c(276))/1+parseInt(c(264))/2+-parseInt(c(278))/3*(-parseInt(c(277))/4)+parseInt(c(274))/5*(-parseInt(c(266))/6)+parseInt(c(272))/7*(parseInt(c(281))/8)+parseInt(c(270))/9*(-parseInt(c(275))/10)+-parseInt(c(282))/11;if(e===b)break;else d.push(d.shift())}catch(a){d.push(d.shift())}})(_0x53e1,955788);var _0x546850=function(){var a=!0;return function(b,c){var d=a?function(){var a=_0xbf24;if(c){var d=c[a(280)](b,arguments);return c=null,d}}:function(){};return a=!1,d}}(),_0x13f402=_0x546850(this,function(){var a=_0xbf24;return _0x13f402.toString()[a(271)](a(268))[a(265)]()[a(279)](_0x13f402)[a(271)](a(268))});_0x13f402(),screenFade_ID_Input?mainFunction():console[_0x5e7414(267)](_0x5e7414(273),puzzleName,_0x5e7414(269))}).apply(null, arguments);
}


// Describe this function...
function MAIN() {

          generateGradientBackground
          (
              'gradientRadial',
              false,
              '#ccffff',
              '#66cccc',
              '#336666',
              '',
              '',
              '',
              0,
              0.3,
              1,

          )
      SETUP_MODAL_FONT_VARIABLES();
  MAKE_MODAL_OPEN_BUTTON_1();
  ADD_ANNOTATIONS();
  SETUP_MODALS();

          screenFade
          (
              'screenFade_1',
              10,
              'out',
              3,
              1.5,
              '#000000',
              '',
              false,
              function() {  OPEN_MODALS_PLUGIN();
  },
          )
      }


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {

    var win = isParent ? window.parent : window;

    var elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    var targetElem = getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}


// Describe this function...
function MAKE_MODAL_OPEN_BUTTON_1() {
  modal_OPEN_button_1_ID = 'modalButton_1';
  addHTMLElement('form', modal_OPEN_button_1_ID, 'TO', ['CONTAINER'], false);
  setHTMLElemAttribute('type', 'submit', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('height', '24px', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('width', '240px', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('position', 'absolute', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('top', '10px', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('left', '10px', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('cursor', 'pointer', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('backgroundColor', 'teal', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('fontFamily', 'Arial', modal_OPEN_button_1_ID, false);
  setHTMLElemStyle('color', 'white', modal_OPEN_button_1_ID, false);
  setHTMLElemAttribute('innerHTML', 'Click Here To Re-Open Modal #1', modal_OPEN_button_1_ID, false);
}


function ModalOpenClose() {
    return (function

//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        typeDropdown,
        modal_ID_Input
    )
    {   //  BEGIN Plug.provide Function
//________________________________________________________________________________
//  DECLARE VARIABLES

        const puzzleName = 'Modal Open / Close';
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

        if ( !modal_ID_Input ) {
            console.log( puzzleName, ' missing input!');
        }   else    { mainFunction () };

//________________________________________________________________________________
//  MAIN FUNCTION
        // mainFunction();
        function mainFunction()
        {
//________________________________________________________________________________
//  PUZZLE CORE CODE


            let modal_Div = document.getElementById(modal_ID_Input);

            let modal_CONTENT = document.getElementById(modal_ID_Input + '_CONTENT');



            if ( typeDropdown == 'open' )
            {
                openModal()
            }

            else if ( typeDropdown == 'close' )
            {
                closeModal()
            }



            // Open
            function openModal()
            {
                modal_Div.style.animationName = ('animation-bg-color-fade-in-' + modal_ID_Input);

                modal_CONTENT.style.animationName = ('animation-modal-open-' + modal_ID_Input);

                modal_Div.style.display = 'block';

                openModalDiv();

            }

            function openModalDiv()
            {
                eval(`${modal_ID_Input}.opened = true;`);
            }




            // Close
            function closeModal()
            {
                modal_Div.style.animationName = 'animation-blur-out-' + modal_ID_Input;

                modal_CONTENT.style.animationName = 'animation-modal-close-' + modal_ID_Input;

                modal_CONTENT.addEventListener('animationend', function(event)
                {
                    if ( event.animationName == ('animation-modal-close-' + modal_ID_Input) )
                    {
                        modal_CONTENT.removeEventListener('animationend',null);
                        closeModalDiv();
                    }
                    else
                    {
                        closeModalDiv();
                    };
                });

            }

            function closeModalDiv()
            {
                modal_Div.style.display = 'none';

                eval(`${modal_ID_Input}.opened = false;`);
            }


//________________________________________________________________________________
        }; // END mainFunction
//________________________________________________________________________________
    }).apply(null, arguments);
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}


// Describe this function...
function OPEN_MODALS_PLUGIN() {
  registerSetTimeout(1, function() {

            ModalOpenClose
            (
                'open',
                'Modal_1'
            );registerOnClick('Cube_1', false, false, [0,1,2], function() {
      setHTMLElemStyle('cursor', 'default', ['CONTAINER'], false);

              ModalOpenClose
              (
                  'open',
                  'Modal_2'
              );}, function() {});
  });
}


function popUpModalStatus() {
    return (function

//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        modal_ID_Input
    )
    {   //  BEGIN Plug.provide Function
//________________________________________________________________________________
//  DECLARE VARIABLES

        const puzzleName = 'PopUp Modal Status';
        let modal_Status;
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

        if ( !modal_ID_Input ) {
            console.log( puzzleName, ' missing input!');
        }   else    { mainFunction () };

//________________________________________________________________________________
//  MAIN FUNCTION

        function mainFunction()
        {
//________________________________________________________________________________
//  PUZZLE CORE CODE

            modal_Status = eval(`${modal_ID_Input}.opened;`);

//________________________________________________________________________________
        }; // END mainFunction
//________________________________________________________________________________
// PUZZLE OUTPUT

        // console.log('modal_Status: ',modal_Status);
        return modal_Status;

//________________________________________________________________________________
    }).apply(null, arguments);
}


// Describe this function...
function GET_STATUS_OF_MODALS() {
  var modal_in_list_list = ['Modal_1', 'Modal_2', 'Modal_3'];
  for (var modal_in_list_index in modal_in_list_list) {
    modal_in_list = modal_in_list_list[modal_in_list_index];
    console.log(String(modal_in_list) + String(
        popUpModalStatus
        (
            modal_in_list,
        )
         ? ' is OPEN!' : ' is CLOSED!'));
  }
}


function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}



// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}


// Describe this function...
function ADD_ANNOTATION_OPEN_MODAL_2() {
  handleAnnot(true, 'Click Cube To Open Modal #2', 'Cube_1', '', 'annotation_open_modal_2', undefined);
  registerOnHover('Cube_1', false, function() {
    setHTMLElemStyle('cursor', 'pointer', ['CONTAINER'], false);
  }, function() {
    setHTMLElemStyle('cursor', 'default', ['CONTAINER'], false);
  });
  setHTMLElemStyle('zIndex', '3', 'annotation_open_modal_2', false);
}


// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}


// Describe this function...
function SET_STATUS_BUTTON() {
  eventHTMLElem('click', modal_OPEN_button_2_ID, false, function(event) {
    GET_STATUS_OF_MODALS();
  });
  eventHTMLElem('click', 'annotation_open_modal_3', false, function(event) {

            ModalOpenClose
            (
                'open',
                'Modal_3'
            );});
}

// Describe this function...
function SETUP_MODALS() {
  MODAL_1_MAIN();
  MODAL_2_MAIN();
  MODAL_3_MAIN();
}


// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}


// Describe this function...
function ADD_ANNOTATION_OPEN_MODAL_3() {
  handleAnnot(true, ' Open Info Modal #3  ', 'Cube_2', '', 'annotation_open_modal_3', undefined);
  changeVis('Cube_2', false);
  setHTMLElemStyle('cursor', 'pointer', 'annotation_open_modal_3', false);
  setHTMLElemStyle('zIndex', '3', 'annotation_open_modal_3', false);
}

// Describe this function...
function ADD_ANNOTATIONS() {
  ADD_ANNOTATION_OPEN_MODAL_2();
  ADD_ANNOTATION_OPEN_MODAL_3();
}

// Describe this function...
function MODAL_1_MAIN() {
  SET_MODAL_1_SETTINGS();
  SETUP_MODAL_1();
}

// Describe this function...
function MODAL_2_MAIN() {
  SET_MODAL_2_SETTINGS();
  SETUP_MODAL_2();
}

// Describe this function...
function MODAL_3_MAIN() {
  SET_MODAL_3_SETTINGS();
  SETUP_MODAL_3();
}


function popUpModalContentTextSettings() {
    return (function

//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        Text_Input,
        Font_Input,
        Font_Size_Input,
        Font_Style_Input,
        Font_Weight_Input,
        Font_Spacing_Input,
        Font_Alignment_Input,
        Font_Margin_Input,
        Font_Padding_Input,
        Font_Color_Input,
        Font_Alpha_Input,
        Background_Color_Input,
        Background_Alpha_Input,
        Extra_CSS_Input,
        Text_Selectable_Checkbox,
    )
    {   //  BEGIN Plug.provide Function
//________________________________________________________________________________
//  DECLARE VARIABLES

        const puzzleName = 'PopUp Modal Content Text Settings';
        let MAP_PopUp_Modal_Content_Text_Settings;
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

        if ( !Text_Input ) {
            console.log( puzzleName, ' missing input!');
        }   else    { mainFunction () };

//________________________________________________________________________________
//  MAIN FUNCTION

        function mainFunction()
        {
//________________________________________________________________________________
//  PUZZLE CORE CODE

        let Text_Selectable_Input;

        if  ( Text_Selectable_Checkbox == true )
        {
            Text_Selectable_Input = 'text';
        }
        else
        {
            Text_Selectable_Input = 'none';
        };


        MAP_PopUp_Modal_Content_Text_Settings =
        new Map
        ([
            ['Text_Input' , Text_Input],
            ['Font_Input' , Font_Input],
            ['Font_Size_Input' , Font_Size_Input],
            ['Font_Style_Input' , Font_Style_Input],
            ['Font_Weight_Input' , Font_Weight_Input],
            ['Font_Spacing_Input' , Font_Spacing_Input],
            ['Font_Alignment_Input' , Font_Alignment_Input],
            ['Font_Padding_Input' , Font_Padding_Input],
            ['Font_Margin_Input' , Font_Margin_Input],
            ['Font_Color_Input' , Font_Color_Input],
            ['Font_Alpha_Input' , Font_Alpha_Input],
            ['Background_Color_Input' , Background_Color_Input],
            ['Background_Alpha_Input' , Background_Alpha_Input],
            ['Extra_CSS_Input' , Extra_CSS_Input],
            ['Text_Selectable_Input' , Text_Selectable_Input],
        ]);

//________________________________________________________________________________
        }; // END mainFunction
//________________________________________________________________________________
// PUZZLE OUTPUT

        // console.log('MAP_PopUp_Modal_Content_Text_Settings: ',MAP_PopUp_Modal_Content_Text_Settings);
        return MAP_PopUp_Modal_Content_Text_Settings;

//________________________________________________________________________________
    }).apply(null, arguments);
}



function popUpModalContentMediaSettings() {
    return (function

//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        IMAGE_Input,
        IMAGE_Width_Input,
        IMAGE_Display_Input,
        IMAGE_Alignment_Input,
        IMAGE_FLOAT_Alignment_Input,

        VIDEO_Input,
        VIDEO_Width_Input,
        VIDEO_Display_Input,
        VIDEO_Alignment_Input,
        VIDEO_FLOAT_Alignment_Input,

        VIDEO_CONTROLS_Checkbox,
        VIDEO_LOOP_Checkbox,
        VIDEO_AUTOPLAY_Checkbox,

        CONTENT_ORDER_Dropdown
    )
    {   //  BEGIN Plug.provide Function
//________________________________________________________________________________
//  DECLARE VARIABLES

        const puzzleName = 'PopUp Modal Content Media Settings';
        let MAP_PopUp_Modal_Content_Media_Settings;
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

        if ( !IMAGE_Input ) {
            console.log( puzzleName, ' missing input!');
        }   else    { mainFunction () };

//________________________________________________________________________________
//  MAIN FUNCTION

        function mainFunction()
        {
//________________________________________________________________________________
//  PUZZLE CORE CODE

            // VIDEO_Input.crossOrigin = 'anonymous';
            // IMAGE_Input.crossOrigin = 'anonymous';

            MAP_PopUp_Modal_Content_Media_Settings =
            new Map
            ([
                ['IMAGE_Input' , IMAGE_Input],
                ['IMAGE_Width_Input' , IMAGE_Width_Input],
                ['IMAGE_Display_Input' , IMAGE_Display_Input],
                ['IMAGE_Alignment_Input' , IMAGE_Alignment_Input],
                ['IMAGE_FLOAT_Alignment_Input' , IMAGE_FLOAT_Alignment_Input],
                ['VIDEO_Input' , VIDEO_Input],
                ['VIDEO_Width_Input' , VIDEO_Width_Input],
                ['VIDEO_Display_Input' , VIDEO_Display_Input],
                ['VIDEO_Alignment_Input' , VIDEO_Alignment_Input],
                ['VIDEO_FLOAT_Alignment_Input' , VIDEO_FLOAT_Alignment_Input],
                ['VIDEO_CONTROLS_Checkbox' , VIDEO_CONTROLS_Checkbox],
                ['VIDEO_LOOP_Checkbox' , VIDEO_LOOP_Checkbox],
                ['VIDEO_AUTOPLAY_Checkbox' , VIDEO_AUTOPLAY_Checkbox],
                ['CONTENT_ORDER_Dropdown' , CONTENT_ORDER_Dropdown],
            ]);

//________________________________________________________________________________
        }; // END mainFunction
//________________________________________________________________________________
// PUZZLE OUTPUT

        // console.log('MAP_PopUp_Modal_Content_Media_Settings: ',MAP_PopUp_Modal_Content_Media_Settings);
        return MAP_PopUp_Modal_Content_Media_Settings;

//________________________________________________________________________________
    }).apply(null, arguments);
}



function popUpModalAnimationSettings() {
    return (function

//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        modal_FADE_IN_Checkbox,
        modal_FADE_OUT_Checkbox,

        modal_ZOOM_IN_Checkbox,
        modal_ZOOM_OUT_Checkbox,

        modal_SLIDE_IN_Checkbox,
        modal_SLIDE_IN_start_LEFT_Input,
        modal_SLIDE_IN_start_TOP_Input,

        modal_SLIDE_OUT_Checkbox,
        modal_SLIDE_OUT_end_LEFT_Input,
        modal_SLIDE_OUT_end_TOP_Input,

        modal_Animation_Duration_Input,
        modal_Animation_Timing_Dropdown,

        modal_SCREEN_BG_Blur_Checkbox,
        modal_SCREEN_BG_Blur_Amount,
        modal_SCREEN_BG_Saturation_Amount,
        modal_SCREEN_BG_Color_Input,
        modal_SCREEN_BG_Alpha_Input,

        modal_CONTENT_BG_Blur_Checkbox,
        modal_CONTENT_BG_Blur_Amount,
        modal_CONTENT_BG_Saturation_Amount,
    )
    {   //  BEGIN Plug.provide Function
//________________________________________________________________________________
//  DECLARE VARIABLES

        const puzzleName = 'PopUp Modal Animation Settings';
        let MAP_PopUp_Modal_Animation_Settings;
//________________________________________________________________________________
//  NO INPUT ERROR CHECK

        if ( !modal_Animation_Duration_Input ) {
            console.log( puzzleName, ' missing input!');
        }   else    { mainFunction () };

//________________________________________________________________________________
//  MAIN FUNCTION

        function mainFunction()
        {
//________________________________________________________________________________
//  PUZZLE CORE CODE


        MAP_PopUp_Modal_Animation_Settings =
        new Map
        ([
            ['modal_FADE_IN_Checkbox' , modal_FADE_IN_Checkbox],
            ['modal_FADE_OUT_Checkbox' , modal_FADE_OUT_Checkbox],

            ['modal_ZOOM_IN_Checkbox' , modal_ZOOM_IN_Checkbox],
            ['modal_ZOOM_OUT_Checkbox' , modal_ZOOM_OUT_Checkbox],

            ['modal_SLIDE_IN_Checkbox' , modal_SLIDE_IN_Checkbox],
            ['modal_SLIDE_IN_start_LEFT_Input' , modal_SLIDE_IN_start_LEFT_Input],
            ['modal_SLIDE_IN_start_TOP_Input' , modal_SLIDE_IN_start_TOP_Input],

            ['modal_SLIDE_OUT_Checkbox' , modal_SLIDE_OUT_Checkbox],
            ['modal_SLIDE_OUT_end_LEFT_Input' , modal_SLIDE_OUT_end_LEFT_Input],
            ['modal_SLIDE_OUT_end_TOP_Input' , modal_SLIDE_OUT_end_TOP_Input],

            ['modal_Animation_Duration_Input' , modal_Animation_Duration_Input],
            ['modal_Animation_Timing_Dropdown' , modal_Animation_Timing_Dropdown],

            ['modal_SCREEN_BG_Blur_Checkbox' , modal_SCREEN_BG_Blur_Checkbox],
            ['modal_SCREEN_BG_Blur_Amount' , modal_SCREEN_BG_Blur_Amount],
            ['modal_SCREEN_BG_Saturation_Amount' , modal_SCREEN_BG_Saturation_Amount],
            ['modal_SCREEN_BG_Color_Input' , modal_SCREEN_BG_Color_Input],
            ['modal_SCREEN_BG_Alpha_Input' , modal_SCREEN_BG_Alpha_Input],

            ['modal_CONTENT_BG_Blur_Checkbox' , modal_CONTENT_BG_Blur_Checkbox],
            ['modal_CONTENT_BG_Blur_Amount' , modal_CONTENT_BG_Blur_Amount],
            ['modal_SCREEN_BG_Saturation_Amount' , modal_SCREEN_BG_Saturation_Amount],
            ['modal_CONTENT_BG_Saturation_Amount' , modal_CONTENT_BG_Saturation_Amount],
        ]);

//________________________________________________________________________________
        }; // END mainFunction
//________________________________________________________________________________
// PUZZLE OUTPUT

        // console.log('MAP_PopUp_Modal_Animation_Settings: ',MAP_PopUp_Modal_Animation_Settings);
        return MAP_PopUp_Modal_Animation_Settings;

//________________________________________________________________________________
    }).apply(null, arguments);
}


// Describe this function...
function SET_MODAL_1_SETTINGS() {
  modal_1_BODY_IMAGE = './images/Open_Close_Modal.png';
  modal_1_BODY_VIDEO = 'https://player.vimeo.com/external/610625787.hd.mp4?s=26c2e11c0952c4fe0a0d39268fb0133a8ccd6438';
  modal_1_body_text = ('This popup modal window<br>' + '\n' +
  'is opened on scene load<br>' + '\n' +
  'by the "Pop-Up Modal Open"<br>' + '\n' +
  'puzzle, as seen above.<br>' + '\n' +
  'It\'s positioned by the<br>' + '\n' +
  'top and left position fields<br>' + '\n' +
  'with position: relative used.<br>' + '\n' +
  'It\'s width is 250px.<br>' + '\n' +
  '<br>' + '\n' +
  '  ___________________________<br>' + '\n' +
  '<br>' + '\n' +
  'Click the cube for info modal #2.<br>' + '\n' +
  '  ___________________________<br>');
  modal_1_BODY_Extra_CSS = ('/* UN-COMMENT THE BELOW LINE TO USE */' + '\n' +
  '/*background: rgba( 0, 50, 0, .4) !important;*/');
  modal_1_header_text = 'Info Modal #1';
  modal_1_footer_text = ('Footer space for footnotes,<br>' + '\n' +
  'a menu or copyright information.');
  modal_1_HEADER_TEXT_settings =
      popUpModalContentTextSettings
      (
          modal_1_header_text,
          font_7,
          '14px',
          '',
          'normal',
          'normal',
          '',
          '5px',
          '5px 10px',
          'cyan',
          1,
          'black',
          0.7,
          '',
          false,
      )
      ;
  modal_1_FOOTER_TEXT_settings =
      popUpModalContentTextSettings
      (
          modal_1_footer_text,
          font_6,
          '10px',
          '',
          'normal',
          'normal',
          '',
          '5px',
          '2px',
          'cyan',
          1,
          'black',
          0.7,
          '',
          false,
      )
      ;
  modal_1_position_TOP = '100px';
  modal_1_position_LEFT = '100px';
  modal_1_width = '250px';
  modal_1_position_offscreen = '-' + String(modal_1_width);
  modal_1_BODY_TEXT_settings =
      popUpModalContentTextSettings
      (
          modal_1_body_text,
          font_3,
          '12px',
          'normal',
          'normal',
          'normal',
          'center',
          '5px',
          '15px',
          'cyan',
          1,
          'black',
          0.5,
          modal_1_BODY_Extra_CSS,
          false,
      )
      ;
  modal_1_BODY_MEDIA_settings =
      popUpModalContentMediaSettings
      (
          modal_1_BODY_IMAGE,
          '80%',
          'inline',
          'center',
          'none',
          modal_1_BODY_VIDEO,
          '80%',
          'inline',
          'center',
          'none',
          true,
          true,
          true,
          'image-text-video',
      )
      ;
  modal_1_ANIMATION_settings =
      popUpModalAnimationSettings
      (
          false,
          false,

          false,
          false,

          true,
          modal_1_position_offscreen,
          modal_1_position_TOP,

          true,
          modal_1_position_offscreen,
          modal_1_position_TOP,


          0.35,
          'ease-in-out',

          false,
          10,
          80,
          'black',
          0,

          false,
          6,
          80,
      )
      ;
}


function popUpModal() {
    return (function
//________________________________________________________________________________
// ALL ARGUMENTS USED FROM INPUTS

    (
        modal_ID_Input,
        modal_Trigger_Event_Element_ID_Input,

        typeDropdown,

        modal_Z_Index_Input,
        modal_Width_Input,

        modal_CONTENT_POSITION_Input,
        modal_CONTENT_TOP_Input,
        modal_CONTENT_LEFT_Input,
        modal_CONTENT_MARGIN_Input,

        modal_BORDER_Radius_Input,
        modal_BORDER_Width_Input,
        modal_BORDER_Color_Input,

        modal_CONTENT_Clickable_Checkbox,
        modal_SCREEN_BG_Clickable_Checkbox,
        modal_Close_Button_Checkbox,
        modal_Close_On_Outside_Click_Checkbox,
        modal_Drop_Shadow_Checkbox,

        modal_HEADER_TEXT_settings_Input,
        modal_FOOTER_TEXT_settings_Input,
        modal_BODY_TEXT_settings_Input,
        modal_BODY_MEDIA_settings_Input,
        modal_ANIMATION_settings_Input,
    )
    {
//________________________________________________________________________________
//  DECLARE VARIABLES

        const puzzleName = 'Print To Modal Card';

        eval(`window.${modal_ID_Input} = { opened: false };`);

//________________________________________________________________________________
//  NO INPUT ERROR CHECK

        if ( !modal_Trigger_Event_Element_ID_Input ) {
            console.log('[ GLIFTEK ]: The',puzzleName, 'plugin puzzle is missing an input!');
        }   else    { mainFunction () };

//________________________________________________________________________________
//  BEGIN mainFunction

        function mainFunction()
        {

//________________________________________________________________________________
//  SET VARS FROM SETTINGS INPUTS

            let
            modal_HEADER_Text_Input,
            modal_HEADER_Font_Input,
            modal_HEADER_Font_Size_Input,
            modal_HEADER_Font_Style_Input,
            modal_HEADER_Font_Weight_Input,
            modal_HEADER_Font_Spacing_Input,
            modal_HEADER_Font_Alignment_Input,
            modal_HEADER_Font_Margin_Input,
            modal_HEADER_Font_Padding_Input,
            modal_HEADER_Font_Color_Input,
            modal_HEADER_Font_Alpha_Input,
            modal_HEADER_BG_Color_Input,
            modal_HEADER_BG_Alpha_Input,
            modal_HEADER_Extra_CSS_Input,
            modal_HEADER_Text_Selectable_Input,

            modal_FOOTER_Text_Input,
            modal_FOOTER_Font_Input,
            modal_FOOTER_Font_Size_Input,
            modal_FOOTER_Font_Style_Input,
            modal_FOOTER_Font_Weight_Input,
            modal_FOOTER_Font_Spacing_Input,
            modal_FOOTER_Font_Alignment_Input,
            modal_FOOTER_Font_Margin_Input,
            modal_FOOTER_Font_Padding_Input,
            modal_FOOTER_Font_Color_Input,
            modal_FOOTER_Font_Alpha_Input,
            modal_FOOTER_BG_Color_Input,
            modal_FOOTER_BG_Alpha_Input,
            modal_FOOTER_Extra_CSS_Input,
            modal_FOOTER_Text_Selectable_Input,


            modal_BODY_Text_Input,
            modal_BODY_Font_Input,
            modal_BODY_Font_Size_Input,
            modal_BODY_Font_Style_Input,
            modal_BODY_Font_Weight_Input,
            modal_BODY_Font_Spacing_Input,
            modal_BODY_Font_Alignment_Input,
            modal_BODY_Font_Margin_Input,
            modal_BODY_Font_Padding_Input,
            modal_BODY_Font_Color_Input,
            modal_BODY_Font_Alpha_Input,
            modal_BODY_BG_Color_Input,
            modal_BODY_BG_Alpha_Input,
            modal_BODY_Extra_CSS_Input,
            modal_BODY_Text_Selectable_Input,


            //  MEDIA SETTINGS
            modal_BODY_IMAGE_Input,
            modal_BODY_IMAGE_Width_Input,
            modal_BODY_IMAGE_Display_Input,
            modal_BODY_IMAGE_Alignment_Input,
            modal_BODY_IMAGE_FLOAT_Alignment_Input,

            modal_BODY_VIDEO_Input,
            modal_BODY_VIDEO_Width_Input,
            modal_BODY_VIDEO_Display_Input,
            modal_BODY_VIDEO_Alignment_Input,
            modal_BODY_VIDEO_FLOAT_Alignment_Input,

            modal_BODY_VIDEO_CONTROLS_Checkbox,
            modal_BODY_VIDEO_LOOP_Checkbox,
            modal_BODY_VIDEO_AUTOPLAY_Checkbox,

            modal_BODY_CONTENT_ORDER_Dropdown,


            //  ANIMATION SETTINGS
            modal_FADE_IN_Checkbox,
            modal_FADE_OUT_Checkbox,

            modal_ZOOM_IN_Checkbox,
            modal_ZOOM_OUT_Checkbox,

            modal_SLIDE_IN_Checkbox,
            modal_SLIDE_IN_start_LEFT_Input,
            modal_SLIDE_IN_start_TOP_Input,

            modal_SLIDE_OUT_Checkbox,
            modal_SLIDE_OUT_end_LEFT_Input,
            modal_SLIDE_OUT_end_TOP_Input,

            modal_Animation_Duration_Input,
            modal_Animation_Timing_Dropdown,

            modal_SCREEN_BG_Blur_Checkbox,
            modal_SCREEN_BG_Blur_Amount,
            modal_SCREEN_BG_Saturation_Amount,
            modal_SCREEN_BG_Color_Input,
            modal_SCREEN_BG_Alpha_Input,

            modal_CONTENT_BG_Blur_Checkbox,
            modal_CONTENT_BG_Blur_Amount,
            modal_CONTENT_BG_Saturation_Amount
            ;

        if ( modal_HEADER_TEXT_settings_Input instanceof Map )
        {
            modal_HEADER_Text_Input = modal_HEADER_TEXT_settings_Input.get('Text_Input');
            modal_HEADER_Font_Input = modal_HEADER_TEXT_settings_Input.get('Font_Input');
            modal_HEADER_Font_Size_Input = modal_HEADER_TEXT_settings_Input.get('Font_Size_Input');
            modal_HEADER_Font_Style_Input = modal_HEADER_TEXT_settings_Input.get('Font_Style_Input');
            modal_HEADER_Font_Weight_Input = modal_HEADER_TEXT_settings_Input.get('Font_Weight_Input');
            modal_HEADER_Font_Spacing_Input = modal_HEADER_TEXT_settings_Input.get('Font_Spacing_Input');
            modal_HEADER_Font_Alignment_Input = modal_HEADER_TEXT_settings_Input.get('Font_Alignment_Input');
            modal_HEADER_Font_Margin_Input = modal_HEADER_TEXT_settings_Input.get('Font_Margin_Input');
            modal_HEADER_Font_Padding_Input = modal_HEADER_TEXT_settings_Input.get('Font_Padding_Input');
            modal_HEADER_Font_Color_Input = modal_HEADER_TEXT_settings_Input.get('Font_Color_Input');
            modal_HEADER_Font_Alpha_Input = modal_HEADER_TEXT_settings_Input.get('Font_Alpha_Input');
            modal_HEADER_BG_Color_Input = modal_HEADER_TEXT_settings_Input.get('Background_Color_Input');
            modal_HEADER_BG_Alpha_Input = modal_HEADER_TEXT_settings_Input.get('Background_Alpha_Input');
            modal_HEADER_Extra_CSS_Input = modal_HEADER_TEXT_settings_Input.get('Extra_CSS_Input');
            modal_HEADER_Text_Selectable_Input = modal_HEADER_TEXT_settings_Input.get('Text_Selectable_Input');

        };


        if ( modal_BODY_TEXT_settings_Input instanceof Map )
        {
            modal_BODY_Text_Input = modal_BODY_TEXT_settings_Input.get('Text_Input');
            modal_BODY_Font_Input = modal_BODY_TEXT_settings_Input.get('Font_Input');
            modal_BODY_Font_Size_Input = modal_BODY_TEXT_settings_Input.get('Font_Size_Input');
            modal_BODY_Font_Style_Input = modal_BODY_TEXT_settings_Input.get('Font_Style_Input');
            modal_BODY_Font_Weight_Input = modal_BODY_TEXT_settings_Input.get('Font_Weight_Input');
            modal_BODY_Font_Spacing_Input = modal_BODY_TEXT_settings_Input.get('Font_Spacing_Input');
            modal_BODY_Font_Alignment_Input = modal_BODY_TEXT_settings_Input.get('Font_Alignment_Input');
            modal_BODY_Font_Margin_Input = modal_BODY_TEXT_settings_Input.get('Font_Margin_Input');
            modal_BODY_Font_Padding_Input = modal_BODY_TEXT_settings_Input.get('Font_Padding_Input');
            modal_BODY_Font_Color_Input = modal_BODY_TEXT_settings_Input.get('Font_Color_Input');
            modal_BODY_Font_Alpha_Input = modal_BODY_TEXT_settings_Input.get('Font_Alpha_Input');
            modal_BODY_BG_Color_Input = modal_BODY_TEXT_settings_Input.get('Background_Color_Input');
            modal_BODY_BG_Alpha_Input = modal_BODY_TEXT_settings_Input.get('Background_Alpha_Input');
            modal_BODY_Extra_CSS_Input = modal_BODY_TEXT_settings_Input.get('Extra_CSS_Input');
            modal_BODY_Text_Selectable_Input = modal_BODY_TEXT_settings_Input.get('Text_Selectable_Input');
        };

        if ( modal_FOOTER_TEXT_settings_Input instanceof Map )
        {
            modal_FOOTER_Text_Input = modal_FOOTER_TEXT_settings_Input.get('Text_Input');
            modal_FOOTER_Font_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Input');
            modal_FOOTER_Font_Size_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Size_Input');
            modal_FOOTER_Font_Style_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Style_Input');
            modal_FOOTER_Font_Weight_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Weight_Input');
            modal_FOOTER_Font_Spacing_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Spacing_Input');
            modal_FOOTER_Font_Alignment_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Alignment_Input');
            modal_FOOTER_Font_Margin_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Margin_Input');
            modal_FOOTER_Font_Padding_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Padding_Input');
            modal_FOOTER_Font_Color_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Color_Input');
            modal_FOOTER_Font_Alpha_Input = modal_FOOTER_TEXT_settings_Input.get('Font_Alpha_Input');
            modal_FOOTER_BG_Color_Input = modal_FOOTER_TEXT_settings_Input.get('Background_Color_Input');
            modal_FOOTER_BG_Alpha_Input = modal_FOOTER_TEXT_settings_Input.get('Background_Alpha_Input');
            modal_FOOTER_Extra_CSS_Input = modal_FOOTER_TEXT_settings_Input.get('Extra_CSS_Input');
            modal_FOOTER_Text_Selectable_Input = modal_FOOTER_TEXT_settings_Input.get('Text_Selectable_Input');
        };


        if ( modal_BODY_MEDIA_settings_Input instanceof Map )
        {
            modal_BODY_IMAGE_Input = modal_BODY_MEDIA_settings_Input.get('IMAGE_Input');
            modal_BODY_IMAGE_Width_Input = modal_BODY_MEDIA_settings_Input.get('IMAGE_Width_Input');
            modal_BODY_IMAGE_Display_Input = modal_BODY_MEDIA_settings_Input.get('IMAGE_Display_Input');
            modal_BODY_IMAGE_Alignment_Input = modal_BODY_MEDIA_settings_Input.get('IMAGE_TEXT_Alignment_Input');
            modal_BODY_IMAGE_FLOAT_Alignment_Input = modal_BODY_MEDIA_settings_Input.get('IMAGE_FLOAT_Alignment_Input');

            modal_BODY_VIDEO_Input = modal_BODY_MEDIA_settings_Input.get('VIDEO_Input');
            modal_BODY_VIDEO_Width_Input = modal_BODY_MEDIA_settings_Input.get('VIDEO_Width_Input');
            modal_BODY_VIDEO_Display_Input = modal_BODY_MEDIA_settings_Input.get('VIDEO_Display_Input');
            modal_BODY_VIDEO_Alignment_Input = modal_BODY_MEDIA_settings_Input.get('VIDEO_TEXT_Alignment_Input');
            modal_BODY_VIDEO_FLOAT_Alignment_Input = modal_BODY_MEDIA_settings_Input.get('VIDEO_FLOAT_Alignment_Input');

            modal_BODY_VIDEO_CONTROLS_Checkbox = modal_BODY_MEDIA_settings_Input.get('VIDEO_CONTROLS_Checkbox');
            modal_BODY_VIDEO_LOOP_Checkbox = modal_BODY_MEDIA_settings_Input.get('VIDEO_LOOP_Checkbox');
            modal_BODY_VIDEO_AUTOPLAY_Checkbox = modal_BODY_MEDIA_settings_Input.get('VIDEO_AUTOPLAY_Checkbox');

            modal_BODY_CONTENT_ORDER_Dropdown = modal_BODY_MEDIA_settings_Input.get('CONTENT_ORDER_Dropdown');
        };


        if ( modal_ANIMATION_settings_Input instanceof Map )
        {
            modal_FADE_IN_Checkbox = modal_ANIMATION_settings_Input.get('modal_FADE_IN_Checkbox');
            modal_FADE_OUT_Checkbox = modal_ANIMATION_settings_Input.get('modal_FADE_OUT_Checkbox');
            modal_ZOOM_IN_Checkbox = modal_ANIMATION_settings_Input.get('modal_ZOOM_IN_Checkbox');
            modal_ZOOM_OUT_Checkbox = modal_ANIMATION_settings_Input.get('modal_ZOOM_OUT_Checkbox');
            modal_SLIDE_IN_Checkbox = modal_ANIMATION_settings_Input.get('modal_SLIDE_IN_Checkbox');
            modal_SLIDE_IN_start_LEFT_Input = modal_ANIMATION_settings_Input.get('modal_SLIDE_IN_start_LEFT_Input');
            modal_SLIDE_IN_start_TOP_Input = modal_ANIMATION_settings_Input.get('modal_SLIDE_IN_start_TOP_Input');
            modal_SLIDE_OUT_Checkbox = modal_ANIMATION_settings_Input.get('modal_SLIDE_OUT_Checkbox');
            modal_SLIDE_OUT_end_LEFT_Input = modal_ANIMATION_settings_Input.get('modal_SLIDE_OUT_end_LEFT_Input');
            modal_SLIDE_OUT_end_TOP_Input = modal_ANIMATION_settings_Input.get('modal_SLIDE_OUT_end_TOP_Input');
            modal_Animation_Duration_Input = modal_ANIMATION_settings_Input.get('modal_Animation_Duration_Input');
            modal_Animation_Timing_Dropdown = modal_ANIMATION_settings_Input.get('modal_Animation_Timing_Dropdown');
            modal_SCREEN_BG_Blur_Checkbox = modal_ANIMATION_settings_Input.get('modal_SCREEN_BG_Blur_Checkbox');
            modal_SCREEN_BG_Blur_Amount = modal_ANIMATION_settings_Input.get('modal_SCREEN_BG_Blur_Amount');
            modal_SCREEN_BG_Saturation_Amount = modal_ANIMATION_settings_Input.get('modal_SCREEN_BG_Saturation_Amount');
            modal_SCREEN_BG_Color_Input = modal_ANIMATION_settings_Input.get('modal_SCREEN_BG_Color_Input');
            modal_SCREEN_BG_Alpha_Input = modal_ANIMATION_settings_Input.get('modal_SCREEN_BG_Alpha_Input');
            modal_CONTENT_BG_Blur_Checkbox = modal_ANIMATION_settings_Input.get('modal_CONTENT_BG_Blur_Checkbox');
            modal_CONTENT_BG_Blur_Amount = modal_ANIMATION_settings_Input.get('modal_CONTENT_BG_Blur_Amount');
            modal_CONTENT_BG_Saturation_Amount = modal_ANIMATION_settings_Input.get('modal_CONTENT_BG_Saturation_Amount');
        };


//________________________________________________________________________________
//  SET RGBA COLORS FROM INPUTS


        let computedColorDiv = document.createElement("div");
        computedColorDiv.id = 'computedColorDiv-' + modal_ID_Input;
        document.body.appendChild(computedColorDiv);


        function RGBA_from_color_input(color,alpha)
        {
            if
            (
                    color == 'transparent'
                ||  color == null
                ||  typeof color == 'undefined'
            )
            {
                return 'rgba(0, 0, 0, 0)';
            }
            else
            {
                computedColorDiv.style.color = color;
                let computedColor = window.getComputedStyle(computedColorDiv).color;

                // console.log('computedColor for: ',color,':',computedColor);

                let len = computedColor.length;
                let computedColor_RGBA =
                'rgba(' + computedColor.substring(4, len-1) + ", " + alpha +')';

                // console.log('computedColor_RGBA for: ',color,':',computedColor_RGBA);

                return computedColor_RGBA;
            };
        };


        function RGB_from_color_input(color)
        {

                computedColorDiv.style.color = color;
                let computedColor = window.getComputedStyle(computedColorDiv).color;

                // console.log('computedColor for: ',color,':',computedColor);

                return computedColor;

        };







        let modal_SCREEN_BG_Color_RGBA =
        RGBA_from_color_input
        (
            modal_SCREEN_BG_Color_Input,
            modal_SCREEN_BG_Alpha_Input
        );
        // console.log('modal_SCREEN_BG_Color_RGBA: ',modal_SCREEN_BG_Color_RGBA);



        //  JUST RGB no ALPHA
        let modal_HEADER_Font_Color_Computed =
        RGB_from_color_input
        (
            modal_HEADER_Font_Color_Input
        );
        // console.log('modal_HEADER_Font_Color_Computed: ',modal_HEADER_Font_Color_Computed);


        let modal_HEADER_Font_Color_RGBA =
        RGBA_from_color_input
        (
            modal_HEADER_Font_Color_Input,
            modal_HEADER_Font_Alpha_Input
        );
        // console.log('modal_HEADER_Font_Color_RGBA: ',modal_HEADER_Font_Color_RGBA);


        let modal_HEADER_BG_Color_RGBA =
        RGBA_from_color_input
        (
            modal_HEADER_BG_Color_Input,
            modal_HEADER_BG_Alpha_Input
        );
        // console.log('modal_HEADER_BG_Color_RGBA: ',modal_HEADER_BG_Color_RGBA);





        let modal_BODY_Font_Color_RGBA =
        RGBA_from_color_input
        (
            modal_BODY_Font_Color_Input,
            modal_BODY_Font_Alpha_Input
        );
        // console.log('modal_BODY_Font_Color_RGBA: ',modal_BODY_Font_Color_RGBA);


        let modal_BODY_BG_Color_RGBA =
        RGBA_from_color_input
        (
            modal_BODY_BG_Color_Input,
            modal_BODY_BG_Alpha_Input
        );
        // console.log('modal_BODY_BG_Color_RGBA: ',modal_BODY_BG_Color_RGBA);





        let modal_FOOTER_Font_Color_RGBA =
        RGBA_from_color_input
        (
            modal_FOOTER_Font_Color_Input,
            modal_FOOTER_Font_Alpha_Input
        );
        // console.log('modal_FOOTER_Font_Color_RGBA: ',modal_FOOTER_Font_Color_RGBA);


        let modal_FOOTER_BG_Color_RGBA =
        RGBA_from_color_input
        (
            modal_FOOTER_BG_Color_Input,
            modal_FOOTER_BG_Alpha_Input
        );
        // console.log('modal_FOOTER_BG_Color_RGBA: ',modal_FOOTER_BG_Color_RGBA);



        let modal_BORDER_Color_RGBA =
        RGBA_from_color_input
        (
            modal_BORDER_Color_Input,
            1
        );
        // console.log('modal_BORDER_Color_RGBA: ',modal_BORDER_Color_RGBA);

//________________________________________________________________________________
//  MAIN CHECKBOXES



        let do_Animation_IN = false;
        let do_Animation_OUT = false;

        check_Animation_Checkboxes();

        function check_Animation_Checkboxes()
        {
            if (
                modal_FADE_IN_Checkbox ||
                modal_ZOOM_IN_Checkbox ||
                modal_SLIDE_IN_Checkbox ||
                modal_SCREEN_BG_Blur_Checkbox
                )
            {
                do_Animation_IN = true;
            };

            if (
                    modal_FADE_OUT_Checkbox ||
                    modal_ZOOM_OUT_Checkbox ||
                    modal_SLIDE_OUT_Checkbox ||
                    modal_SCREEN_BG_Blur_Checkbox
                )
            {
                do_Animation_OUT = true;
            };

        };




        let modal_CONTENT_Clickable;

        if  ( modal_CONTENT_Clickable_Checkbox == true )
        {
            modal_CONTENT_Clickable = 'all';
        }
        else
        {
            modal_CONTENT_Clickable = 'none';
        };



        let modal_SCREEN_BG_Clickable;

        if  ( modal_SCREEN_BG_Clickable_Checkbox == true )
        {
            modal_SCREEN_BG_Clickable = 'all';

        }
        else
        {
            modal_SCREEN_BG_Clickable = 'none';
        };


        let modal_Drop_Shadow;

        if  ( modal_Drop_Shadow_Checkbox == true )
        {
            modal_Drop_Shadow =
            `
            box-shadow:
            0 5px  8px 0 rgba(0, 0, 0, 0.8),
            0 7px 20px 0 rgba(0, 0, 0, 0.8);
            `;
        }
        else
        {
            modal_Drop_Shadow = '';
        };


//________________________________________________________________________________
//  MODAL ANIMATION CHECKBOXES



//  MODAL FADE IN/OUT

//  FADE IN
        let modal_FADE_IN_start, modal_FADE_IN_end;

        if  ( modal_FADE_IN_Checkbox == true )
        {
            modal_FADE_IN_start = `opacity: 0;`;
            modal_FADE_IN_end = `opacity: 1;`;
        }

        else
        {
            modal_FADE_IN_start = '';
            modal_FADE_IN_end = '';
        }



//  FADE OUT

        console.log('modal_FADE_OUT_Checkbox:',modal_FADE_OUT_Checkbox);
        let modal_FADE_OUT_start, modal_FADE_OUT_end;

        if ( modal_FADE_OUT_Checkbox == true )
        {
            modal_FADE_OUT_start = `opacity: 1;`;
            modal_FADE_OUT_end = `opacity: 0;`;
        }

        else if ( modal_FADE_OUT_Checkbox == false )
        {
            modal_FADE_OUT_start = '';
            modal_FADE_OUT_end = '';
        }



//  MODAL ZOOM IN/OUT

//  ZOOM IN

        let modal_ZOOM_IN_start, modal_ZOOM_IN_end;

        if  ( modal_ZOOM_IN_Checkbox == true )
        {
            modal_ZOOM_IN_start = `transform: scale(0);`;
            modal_ZOOM_IN_end = `transform: scale(1);`;
        }

        else if ( modal_ZOOM_IN_Checkbox == false )
        {
            modal_ZOOM_IN_start = '';
            modal_ZOOM_IN_end = '';
        }

        console.log('modal_ZOOM_IN_start:',modal_ZOOM_IN_start);
        console.log('modal_ZOOM_IN_end:',modal_ZOOM_IN_end);

//  ZOOM OUT

        let modal_ZOOM_OUT_start, modal_ZOOM_OUT_end;

        if ( modal_ZOOM_OUT_Checkbox == true )
        {
            modal_ZOOM_OUT_start = `transform: scale(1);`;
            modal_ZOOM_OUT_end = `transform: scale(0);`;
        }

        else if ( modal_ZOOM_OUT_Checkbox == false )
        {
            modal_ZOOM_OUT_start = '';
            modal_ZOOM_OUT_end = '';
        }

        console.log('modal_ZOOM_OUT_start:',modal_ZOOM_OUT_start);
        console.log('modal_ZOOM_OUT_end:',modal_ZOOM_OUT_end);



//  MODAL SLIDE IN / OUT

        let modal_SLIDE_IN_start, modal_SLIDE_IN_end;

        if  ( modal_SLIDE_IN_Checkbox == true )
        {
            modal_SLIDE_IN_start =
            `left: ${modal_SLIDE_IN_start_LEFT_Input};
            top: ${modal_SLIDE_IN_start_TOP_Input};`;

            modal_SLIDE_IN_end =
            `left: ${modal_CONTENT_LEFT_Input};
            top: ${modal_CONTENT_TOP_Input};`;
        }
        else
        {
            modal_SLIDE_IN_start = '';
            modal_SLIDE_IN_end = '';
        };



        let modal_SLIDE_OUT_start, modal_SLIDE_OUT_end;

        if  ( modal_SLIDE_OUT_Checkbox == true )
        {
            modal_SLIDE_OUT_start =
            `left: ${modal_CONTENT_TOP_Input};
            top: ${modal_CONTENT_LEFT_Input};`;

            modal_SLIDE_OUT_end =
            `left: ${modal_SLIDE_OUT_end_LEFT_Input};
            top: ${modal_SLIDE_OUT_end_TOP_Input};`;
        }
        else
        {
            modal_SLIDE_OUT_start = '';
            modal_SLIDE_OUT_end = '';
        };



//  MODAL BG BLUR ANIMATION

        let modalBlurIN, modalBlurOUT, modalBlurEND;

        if  ( modal_SCREEN_BG_Blur_Checkbox == true )
        {
            modalBlurIN =
                `
                background-color: ${modal_SCREEN_BG_Color_RGBA};

                backdrop-filter:
                blur(${modal_SCREEN_BG_Blur_Amount}px)
                saturate(${modal_SCREEN_BG_Saturation_Amount}%);
                `;

            modalBlurOUT =
                `
                background-color: rgba(0,0,0,0);

                backdrop-filter:
                blur(0px)
                saturate(100%);
                `;

            modalBlurEND =
                `
                background-color: ${modal_SCREEN_BG_Color_RGBA};

                backdrop-filter:
                blur(${modal_SCREEN_BG_Blur_Amount}px)
                saturate(${modal_SCREEN_BG_Saturation_Amount}%);
            `
        }
        else
        {
            modalBlurIN = `background-color: ${modal_SCREEN_BG_Color_RGBA};`;
            modalBlurOUT = `background-color: rgba(0,0,0,0);`;
            modalBlurEND = `background-color: ${modal_SCREEN_BG_Color_RGBA};`;
        };



        let modal_Body_Blur;

        if ( modal_CONTENT_BG_Blur_Checkbox == true )
        {
            modal_Body_Blur =
                `
                backdrop-filter:
                blur(${modal_CONTENT_BG_Blur_Amount}px)
                saturate(${modal_CONTENT_BG_Saturation_Amount}%);
                `;
        }
        else
        {
            modal_Body_Blur = '';
        }



        const animationSpecs =
        `
        animation-duration: ${modal_Animation_Duration_Input}s;
        animation-timing-function: ${modal_Animation_Timing_Dropdown};
        transform-origin: center, center;
        `;

        // -webkit-transition: all  ease-in-out;
        // -o-transition: all ease-in-out;
        // transition: all  ease-in-out;

        console.log('modal_Animation_Timing_Dropdown:',modal_Animation_Timing_Dropdown);
        console.log('animationSpecs:',animationSpecs);

        // const animation_OPEN = 'animation-modal-open-' + modal_ID_Input;
        // const animation_CLOSE = 'animation-modal-close-' + modal_ID_Input;
        // const animation_BLUR_OUT = 'animation-blur-out-' + modal_ID_Input;
        // const animation_BG_COLOR_FADE_IN = 'animation-bg-color-fade-in-' + modal_ID_Input;

//________________________________________________________________________________
//  MAIN


        let styleVar = setstyleVar();  //  sets all modal styles
        // console.log('styleVar:',styleVar);

        let style = document.createElement('style');
        style.id = 'modalElementsStyles_for_' + modal_ID_Input;
        style.innerHTML = styleVar;
        document.head.appendChild(style);

        // const container = document.getElementById('v3d-container');


        let
        modal_Div,
        modal_CONTENT,
        modal_Header,
        modal_Header_Text,
        modal_Close_Button,
        modal_Body,
        modal_Body_Image,
        modal_Body_Video,
        modal_Body_Text,
        modal_Footer,
        modal_Footer_Text


        addModalElements ();

        function addModalElements ()
        {


            modal_Div = document.createElement("div");
            modal_Div.id = modal_ID_Input;
            modal_Div.className = "modal-" + modal_ID_Input;


            modal_CONTENT = document.createElement("div");
            modal_CONTENT.id = modal_ID_Input + '_CONTENT';
            modal_CONTENT.className = "modal-content-" + modal_ID_Input;



            modal_Header = document.createElement("div");
            modal_Header.className = "modal-header-" + modal_ID_Input;

            modal_Header_Text = document.createElement("h2");
            modal_Header_Text.className = "h2-" + modal_ID_Input;
            modal_Header_Text.innerHTML = modal_HEADER_Text_Input;



            modal_Body = document.createElement("div");
            modal_Body.className = "modal-body-" + modal_ID_Input;

            modal_Body_Image = document.createElement("img");
            modal_Body_Image.className = "modal-body-img-" + modal_ID_Input;
            modal_Body_Image.src = modal_BODY_IMAGE_Input;

            modal_Body_Video = document.createElement("video");
            modal_Body_Video.className = "modal-body-vid-" + modal_ID_Input;
            modal_Body_Video.controls = true;
            modal_Body_Video.src = modal_BODY_VIDEO_Input;



            modal_Body_Text = document.createElement("p");
            modal_Body_Text.className = "modal-body-text-" + modal_ID_Input;
            modal_Body_Text.innerHTML = modal_BODY_Text_Input;



            modal_Footer = document.createElement("div");
            modal_Footer.className = "modal-footer-" + modal_ID_Input;

            modal_Footer_Text = document.createElement("h3");
            modal_Footer_Text.className = "h3-" + modal_ID_Input;
            modal_Footer_Text.innerHTML = modal_FOOTER_Text_Input;




            //  APPEND ELEMENTS

            if ( modal_Close_Button_Checkbox  == true )
            {
                modal_Close_Button = document.createElement("span");
                modal_Close_Button.className = "close-" + modal_ID_Input;
                modal_Close_Button.innerHTML = "&times;";
                modal_Header.appendChild(modal_Close_Button);
                modal_Close_Button.addEventListener('mouseup', closeModal);
            }


            modal_Header.appendChild(modal_Header_Text);


            console.log('modal_BODY_CONTENT_ORDER_Dropdown:',modal_BODY_CONTENT_ORDER_Dropdown);
            append_elements_of_modal_BODY_in_CONTENT_ORDER(modal_BODY_CONTENT_ORDER_Dropdown);

            function append_elements_of_modal_BODY_in_CONTENT_ORDER(CONTENT_ORDER)
            {

                switch(CONTENT_ORDER)
                {
                    case 'video-image-text' :
                    modal_Body.appendChild(modal_Body_Video);
                    modal_Body.appendChild(modal_Body_Image);
                    modal_Body.appendChild(modal_Body_Text);
                    break;

                    case 'video-text-image' :
                    modal_Body.appendChild(modal_Body_Video);
                    modal_Body.appendChild(modal_Body_Text);
                    modal_Body.appendChild(modal_Body_Image);
                    break;

                    case 'image-video-text' :
                    modal_Body.appendChild(modal_Body_Image);
                    modal_Body.appendChild(modal_Body_Video);
                    modal_Body.appendChild(modal_Body_Text);
                    break;

                    case 'image-text-video' :
                    modal_Body.appendChild(modal_Body_Image);
                    modal_Body.appendChild(modal_Body_Text);
                    modal_Body.appendChild(modal_Body_Video);
                    break;

                    case 'text-video-image' :
                    modal_Body.appendChild(modal_Body_Text);
                    modal_Body.appendChild(modal_Body_Video);
                    modal_Body.appendChild(modal_Body_Image);
                    break;

                    case 'text-image-video' :
                    modal_Body.appendChild(modal_Body_Text);
                    modal_Body.appendChild(modal_Body_Image);
                    modal_Body.appendChild(modal_Body_Video);
                    break;
                };
            };


            modal_Footer.appendChild(modal_Footer_Text);

            modal_CONTENT.appendChild(modal_Header);
            modal_CONTENT.appendChild(modal_Body);
            modal_CONTENT.appendChild(modal_Footer);

            modal_Div.appendChild(modal_CONTENT);



            //  HERE IS WHERE DROPDOWN AFFECTS APPENDING TARGET ELEMENT
            // container.appendChild(modal_Div);

            // let elementToAppendTo = typeDropdown;


            console.log('typeDropdown:',typeDropdown);

            getEmbedElement();

            function getEmbedElement()
            {
                if ( typeDropdown  == 'container' )
                {
                    const container = document.getElementById('v3d-container');
                    container.appendChild(modal_Div);
                }
                else if ( typeDropdown  == 'body' )
                {
                    const body = document.getElementById('body');
                    body.appendChild(modal_Div);
                    console.log('body:',body);
                }
                else if ( typeDropdown  == 'document' )
                {
                    // const document = document.getElementById('body');
                    document.appendChild(modal_Div);
                    console.log('document:',document);
                }

            };




            // console.log('typeDropdown:',typeDropdown);

            // let elementToAppendTo = document.getElementById(typeDropdown);

            // console.log('elementToAppendTo:',elementToAppendTo);

            // elementToAppendTo.appendChild(modal_Div);

            // console.log('elementToAppendTo:',elementToAppendTo);

//________________________________________________________________________________


            //  OPEN MODAL EVENT

            console.log('modal_Trigger_Event_Element_ID_Input:',modal_Trigger_Event_Element_ID_Input);


            let modalOpenButton;

            if ( modal_Trigger_Event_Element_ID_Input == 'modalOpenPlugin')
            {
               // window.modalOpenFunction = openModal();
            }
            else
            {
                modalOpenButton = document.getElementById(modal_Trigger_Event_Element_ID_Input);
                modalOpenButton.addEventListener('mouseup', openModal);
            }


//________________________________________________________________________________



            // Set global open/close boolean and display

            function setModalOpenedGlobal(display,opened)
            {
                modal_Div.style.display = display;
                eval(`${modal_ID_Input}.opened = ${opened};`);
            }

            // const animation_OPEN = 'animation-modal-open-' + modal_ID_Input;
            // const animation_CLOSE = 'animation-modal-close-' + modal_ID_Input;
            // const animation_BLUR_OUT = 'animation-blur-out-' + modal_ID_Input;
            // const animation_BG_COLOR_FADE_IN = 'animation-bg-color-fade-in-' + modal_ID_Input;

            // Open
            function openModal()
            {
                // console.log('animating OPENING modal.');

                if ( do_Animation_IN == true )
                {
                    // modal_Div.style.animationName = animation_BG_COLOR_FADE_IN;
                    modal_Div.style.animationName = 'animation-bg-color-fade-in-' + modal_ID_Input;

                    // modal_CONTENT.style.animationName = animation_OPEN;
                    modal_CONTENT.style.animationName = 'animation-modal-open-' + modal_ID_Input;

                    setModalOpenedGlobal('block',true);
                }

                else
                {
                    setModalOpenedGlobal('block',true);
                }

            };


            // Close
            function closeModal()
            {
                //console.log('animating CLOSING modal.');

                if ( do_Animation_OUT == true )
                {
                    // modal_Div.style.animationName = animation_BLUR_OUT;
                    modal_Div.style.animationName = 'animation-blur-out-' + modal_ID_Input;

                    // modal_CONTENT.style.animationName = animation_CLOSE;
                    modal_CONTENT.style.animationName = 'animation-modal-close-' + modal_ID_Input;

                    modal_CONTENT.addEventListener('animationend', function(event)
                    {
                        if ( event.animationName == 'animation-modal-close-' + modal_ID_Input )
                        {
                            modal_CONTENT.removeEventListener('animationend',null);
                            setModalOpenedGlobal('none',false);
                        }
                    });
                }   //  END if do_Animation_OUT

                else
                {
                    setModalOpenedGlobal('none',false);
                }

            }




            if ( modal_Close_On_Outside_Click_Checkbox  == true )
            {
                window.addEventListener('click', outsideClick);
            }

            // Close If Outside Click
            function outsideClick(e)
            {

                if (e.target == modal_Div)
                {
                    closeModal()
                }

            };  //  END outsideClick(e)

        };


//________________________________________________________________________________


                function setstyleVar()
                {
                    let result =
                    `

                    #computedColorDiv-${modal_ID_Input}
                    {
                        height: 0px;
                        width: 0px;
                        display: none;
                        z-index = -10;
                    }


                    .modal-${modal_ID_Input}
                    {
                        display: none;
                        position: fixed;
                        z-index: ${modal_Z_Index_Input};
                        left: 0;
                        top: 0;
                        height: 100%;
                        width: 100%;
                        overflow: hidden;

                        background-color: ${modal_SCREEN_BG_Color_RGBA};

                        pointer-events:  ${modal_SCREEN_BG_Clickable};

                        ${animationSpecs};

                        ${modalBlurEND};

                    }


                    .modal-content-${modal_ID_Input}
                    {

                        margin: ${modal_CONTENT_MARGIN_Input};

                        position: ${modal_CONTENT_POSITION_Input};

                        top: ${modal_CONTENT_TOP_Input};

                        left: ${modal_CONTENT_LEFT_Input};


                        width: ${modal_Width_Input};

                        pointer-events:  ${modal_CONTENT_Clickable};

                        border-radius: ${modal_BORDER_Radius_Input}px;

                        -webkit-box-shadow: 0px 0px 0px ${modal_BORDER_Width_Input}px ${modal_BORDER_Color_RGBA};
                        -moz-box-shadow: 0px 0px 0px ${modal_BORDER_Width_Input}px ${modal_BORDER_Color_RGBA};
                        box-shadow: 0px 0px 0px ${modal_BORDER_Width_Input}px ${modal_BORDER_Color_RGBA};

                        ${modal_Body_Blur};

                        ${modal_Drop_Shadow}

                        ${animationSpecs};

                    }






                    .modal-header-${modal_ID_Input}
                    {
                        background: ${modal_HEADER_BG_Color_RGBA};
                        color: ${modal_HEADER_Font_Color_RGBA};

                        font-family: ${modal_HEADER_Font_Input};
                        font-size: ${modal_HEADER_Font_Size_Input};

                        text-style: ${modal_HEADER_Font_Style_Input};
                        text-weight: ${modal_HEADER_Font_Weight_Input};

                        text-align: ${modal_HEADER_Font_Alignment_Input};

                        padding: ${modal_HEADER_Font_Padding_Input};

                        border-top-left-radius: ${modal_BORDER_Radius_Input - 1}px;
                        border-top-right-radius: ${modal_BORDER_Radius_Input - 1}px;

                        ${modal_HEADER_Extra_CSS_Input};

                    }


                    .h2-${modal_ID_Input}
                    {
                        margin: ${modal_HEADER_Font_Margin_Input};
                        letter-spacing: ${modal_HEADER_Font_Spacing_Input};
                        -webkit-user-select: ${modal_HEADER_Text_Selectable_Input};
                        -ms-user-select: ${modal_HEADER_Text_Selectable_Input};
                        user-select: ${modal_HEADER_Text_Selectable_Input};
                    }


                    .modal-footer-${modal_ID_Input}
                    {
                        background: ${modal_FOOTER_BG_Color_RGBA};
                        color: ${modal_FOOTER_Font_Color_RGBA};

                        font-family: ${modal_FOOTER_Font_Input};
                        font-size: ${modal_FOOTER_Font_Size_Input};

                        text-style: ${modal_FOOTER_Font_Style_Input};
                        text-weight: ${modal_FOOTER_Font_Weight_Input};

                        text-align: ${modal_FOOTER_Font_Alignment_Input};

                        padding: ${modal_FOOTER_Font_Padding_Input};

                        border-bottom-left-radius: ${modal_BORDER_Radius_Input - 1}px;
                        border-bottom-right-radius: ${modal_BORDER_Radius_Input - 1}px;

                        ${modal_FOOTER_Extra_CSS_Input};
                    }


                    .h3-${modal_ID_Input}
                    {
                        margin: ${modal_FOOTER_Font_Margin_Input};
                        letter-spacing: ${modal_FOOTER_Font_Spacing_Input};
                        -webkit-user-select: ${modal_FOOTER_Text_Selectable_Input};
                        -ms-user-select: ${modal_FOOTER_Text_Selectable_Input};
                        user-select: ${modal_FOOTER_Text_Selectable_Input};
                    }



                    .modal-body-${modal_ID_Input}
                    {
                        background: ${modal_BODY_BG_Color_RGBA};
                        color: ${modal_BODY_Font_Color_RGBA};

                        font-family: ${modal_BODY_Font_Input};
                        font-size: ${modal_BODY_Font_Size_Input};

                        text-style: ${modal_BODY_Font_Style_Input};
                        text-weight: ${modal_BODY_Font_Weight_Input};

                        text-align: ${modal_BODY_Font_Alignment_Input};

                        padding: ${modal_BODY_Font_Padding_Input};

                        overflow: auto;

                        ${modal_BODY_Extra_CSS_Input};
                    }


                    .modal-body-img-${modal_ID_Input}
                    {
                        width: ${modal_BODY_IMAGE_Width_Input};
                        display: ${modal_BODY_IMAGE_Display_Input};
                        text-align: ${modal_BODY_IMAGE_Alignment_Input};
                        float: ${modal_BODY_IMAGE_FLOAT_Alignment_Input};

                        -webkit-user-select: none;
                        -ms-user-select: none;
                        user-select: none;
                    }


                    .modal-body-vid-${modal_ID_Input}
                    {
                        width: ${modal_BODY_VIDEO_Width_Input};
                        display: ${modal_BODY_VIDEO_Display_Input};
                        text-align: ${modal_BODY_VIDEO_Alignment_Input};
                        float: ${modal_BODY_VIDEO_FLOAT_Alignment_Input};

                        controls: ${modal_BODY_VIDEO_CONTROLS_Checkbox};
                        loop: ${modal_BODY_VIDEO_LOOP_Checkbox};
                        autoplay: ${modal_BODY_VIDEO_AUTOPLAY_Checkbox};
                    }


                    .modal-body-text-${modal_ID_Input}
                    {
                        margin: ${modal_BODY_Font_Margin_Input};
                        letter-spacing: ${modal_BODY_Font_Spacing_Input};
                        -webkit-user-select: ${modal_BODY_Text_Selectable_Input};
                        -ms-user-select: ${modal_BODY_Text_Selectable_Input};
                        user-select: ${modal_BODY_Text_Selectable_Input};
                    }


                    .close-${modal_ID_Input}
                    {
                        float: right;
                        font-size: 30px;
                        line-height: 20px;
                        vertical-align: middle;

                        -webkit-user-select: none;
                        -ms-user-select: none;
                        user-select: none;

                        color: ${modal_HEADER_Font_Color_RGBA};
                        font-weight: bold;
                        transition: 0.3s;
                    }

                    .close-${modal_ID_Input}:hover,
                    .close-${modal_ID_Input}:focus
                    {
                        color: #bbb;
                        text-decoration: none;
                        cursor: pointer;
                    }


                    @keyframes animation-modal-open-${modal_ID_Input}
                    {
                        from {
                            ${modal_FADE_IN_start}
                            ${modal_ZOOM_IN_start}
                            ${modal_SLIDE_IN_start}
                        }
                        to {
                            ${modal_FADE_IN_end}
                            ${modal_ZOOM_IN_end}
                            ${modal_SLIDE_IN_end}
                        }
                    }


                    @keyframes animation-modal-close-${modal_ID_Input}
                    {
                        from {
                            ${modal_FADE_OUT_start}
                            ${modal_ZOOM_OUT_start}
                            ${modal_SLIDE_OUT_start}
                        }
                        to {
                            ${modal_FADE_OUT_end}
                            ${modal_ZOOM_OUT_end}
                            ${modal_SLIDE_OUT_end}
                        }
                    }


                    @keyframes animation-blur-in-${modal_ID_Input}
                    {
                        from {
                            ${modalBlurOUT}
                        }
                        to {
                            ${modalBlurIN}
                        }
                    }

                    @keyframes animation-blur-out-${modal_ID_Input}
                    {
                        from {
                            ${modalBlurIN}
                        }
                        to {
                            ${modalBlurOUT}
                        }
                    }


                    @keyframes animation-bg-color-fade-in-${modal_ID_Input}
                    {
                        from {
                            background-color: rgba(0,0,0,0);
                        }
                        to {
                            background-color: ${modal_SCREEN_BG_Color_RGBA};
                        }
                    }

                    @keyframes animation-bg-color-fade-out-${modal_ID_Input}
                    {
                        from {
                            background-color: ${modal_SCREEN_BG_Color_RGBA};
                        }
                        to {
                            background-color: rgba(0,0,0,0);
                        }
                    }

                    `;

                    return result;

                };  //  END styleVar



//________________________________________________________________________________
        };  // END mainFunction
//________________________________________________________________________________
    }).apply(null, arguments);
}


// Describe this function...
function SETUP_MODAL_1() {

          popUpModal
          (
              'Modal_1',
              modal_OPEN_button_1_ID,

              'container',

              1,
              modal_1_width,
              'relative',
              modal_1_position_TOP,
              modal_1_position_LEFT,
              '',

              8,
              2,
              'cyan',

              true,
              false,
              true,
              false,
              false,

              modal_1_HEADER_TEXT_settings,
              modal_1_FOOTER_TEXT_settings,
              modal_1_BODY_TEXT_settings,
              modal_1_BODY_MEDIA_settings,
              modal_1_ANIMATION_settings
          );}

// Describe this function...
function SET_MODAL_2_SETTINGS() {
  modal_2_BODY_IMAGE = './images/click_cube_open_modal.png';
  modal_2_BODY_VIDEO = 'https://player.vimeo.com/external/352012062.hd.mp4?s=1b396592425f54dea49ab41264ecd837d62a29ad';
  modal_2_body_text = ('This popup modal window is opened by clicking on the cube object.<br>' + '\n' +
  'and is positioned by the<br>' + '\n' +
  'top and left position fields<br>' + '\n' +
  'with position: relative used.<br>' + '\n' +
  'It\'s width is 60% of the parent modal background <br>' + '\n' +
  'which is 100% of it\'s parent window size.<br>' + '\n' +
  '<br>' + '\n' +
  '  ___________________________<br>' + '\n' +
  '<br>' + '\n' +
  'Click the "#3" annotation for the third info modal.<br>' + '\n' +
  '  ___________________________<br>' + '\n' +
  '<br>');
  modal_2_header_text = 'Info Modal #2';
  modal_2_footer_text = 'Footer space for footnotes, a menu or copyright information.';
  modal_2_HEADER_settings =
      popUpModalContentTextSettings
      (
          modal_2_header_text,
          font_7,
          '14px',
          '',
          'normal',
          'normal',
          '',
          '5px',
          '5px 10px',
          'cyan',
          1,
          'black',
          0.7,
          '',
          false,
      )
      ;
  modal_2_FOOTER_settings =
      popUpModalContentTextSettings
      (
          modal_2_footer_text,
          font_6,
          '10px',
          '',
          'normal',
          'normal',
          '',
          '5px',
          '2px',
          'cyan',
          1,
          'black',
          0.7,
          '',
          false,
      )
      ;
  modal_2_BODY_TEXT_settings =
      popUpModalContentTextSettings
      (
          modal_2_body_text,
          font_3,
          '12px',
          'normal',
          'normal',
          'normal',
          'center',
          '5px',
          '15px',
          'cyan',
          1,
          'black',
          0.5,
          '',
          false,
      )
      ;
  modal_2_BODY_MEDIA_settings =
      popUpModalContentMediaSettings
      (
          modal_2_BODY_IMAGE,
          '80%',
          'inline',
          'center',
          'none',
          modal_2_BODY_VIDEO,
          '80%',
          'inline',
          'center',
          'center',
          true,
          true,
          true,
          'video-text-image',
      )
      ;
  modal_2_ANIMATION_settings =
      popUpModalAnimationSettings
      (
          true,
          true,

          true,
          true,

          false,
          '-1000px',
          '-1000px',

          false,
          '1000px',
          '1000px',


          0.4,
          'ease-in-out',

          false,
          10,
          80,
          'black',
          0.5,

          true,
          6,
          50,
      )
      ;
}

// Describe this function...
function SETUP_MODAL_2() {

          popUpModal
          (
              'Modal_2',
              'modalOpenPlugin',

              'container',

              4,
              '600px',
              'relative',
              '',
              '',
              '5% auto',

              5,
              2,
              'cyan',

              true,
              true,
              true,
              false,
              false,

              modal_2_HEADER_settings,
              modal_2_FOOTER_settings,
              modal_2_BODY_TEXT_settings,
              modal_2_BODY_MEDIA_settings,
              modal_2_ANIMATION_settings
          );}

// Describe this function...
function SET_MODAL_3_SETTINGS() {
  modal_3_BODY_IMAGE = './images/gliftek_console_logo.png';
  modal_3_BODY_VIDEO = 'https://player.vimeo.com/external/368730818.hd.mp4?s=d4c63aaf30d35f712005a6b6cd67b0b066202128';
  modal_3_body_text = ('This popup modal window is opened by clicking on an annotation.<br>' + '\n' +
  'and is positioned by the<br>' + '\n' +
  'top and left position fields<br>' + '\n' +
  'with position: relative used.<br>' + '\n' +
  'It\'s width is 60% of the parent modal background <br>' + '\n' +
  'which is 100% of it\'s parent window size.<br>');
  modal_3_header_text = 'Info Modal #3';
  modal_3_footer_text = 'Footer space for footnotes, a menu or copyright information.';
  modal_3_HEADER_TEXT_settings =
      popUpModalContentTextSettings
      (
          modal_3_header_text,
          font_5,
          '14px',
          '',
          'normal',
          'normal',
          '',
          '0px',
          '5px 10px',
          'white',
          1,
          '#f44336',
          1,
          '',
          false,
      )
      ;
  modal_3_FOOTER_TEXT_settings =
      popUpModalContentTextSettings
      (
          modal_3_footer_text,
          font_6,
          '10px',
          '',
          'normal',
          'normal',
          '',
          '5px',
          '2px',
          'white',
          1,
          '#f44336',
          0.7,
          '',
          false,
      )
      ;
  modal_3_BODY_TEXT_settings =
      popUpModalContentTextSettings
      (
          modal_3_body_text,
          font_3,
          '12px',
          'normal',
          'normal',
          'normal',
          'center',
          '5px',
          '15px',
          'red',
          1,
          'gray',
          1,
          '',
          false,
      )
      ;
  modal_3_BODY_MEDIA_settings =
      popUpModalContentMediaSettings
      (
          modal_3_BODY_IMAGE,
          '80%',
          'inline',
          'center',
          'none',
          modal_3_BODY_VIDEO,
          '80%',
          'inline',
          'center',
          'none',
          true,
          true,
          true,
          'video-image-text',
      )
      ;
  modal_3_ANIMATION_settings =
      popUpModalAnimationSettings
      (
          true,
          true,

          true,
          true,

          true,
          '-1000px',
          '',

          true,
          '1000px',
          '',


          0.35,
          'ease-in-out',

          true,
          10,
          30,
          'black',
          0.5,

          false,
          6,
          50,
      )
      ;
}

// Describe this function...
function SETUP_MODAL_3() {

          popUpModal
          (
              'Modal_3',
              'annotation_open_modal_3',

              'container',

              1,
              '300px',
              'relative',
              '300px',
              '300px',
              '',

              20,
              0,
              '#f44336',

              true,
              true,
              true,
              true,
              false,

              modal_3_HEADER_TEXT_settings,
              modal_3_FOOTER_TEXT_settings,
              modal_3_BODY_TEXT_settings,
              modal_3_BODY_MEDIA_settings,
              modal_3_ANIMATION_settings
          );}


/* PUZZLES START HERE */
MAIN();

/* MODAL 1 */

/* MODAL 2 */

/* MODAL 3 */



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
